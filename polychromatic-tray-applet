#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2016 Terry Cain <terry@terrys-home.co.uk>
#               2015-2016 Luke Horwell <lukehorwell37+code@gmail.com>
#

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, Gdk, AppIndicator3 as appindicator
import collections
import os
import sys
import signal
import gettext
import setproctitle
from subprocess import Popen as background_process

import razer.client as rclient
from razer_daemon.keyboard import KeyboardColour

import polychromatic.preferences as pref
path = pref.Paths()
import polychromatic.profiles


def get_data_source():
    # Use relative translations if available.
    whereami = os.path.abspath(os.path.join(os.path.dirname(__file__)))
    if os.path.exists(os.path.join(whereami, 'data/')):
        path = os.path.join(whereami, 'data/')
    else:
        path = '/usr/share/polychromatic/'
    return path


class Translations():
    def __init__(self):
        # Determine the locale path
        whereami = os.path.abspath(os.path.join(os.path.dirname(__file__)))
        if os.path.exists(os.path.join(whereami, 'locale/')):
            locale_path = os.path.join(whereami, 'locale/')
            print('Using relative path for translations.')
        else:
            locale_path = '/usr/share/locale/'
            print('Using "/usr/share/locale/" or falling back to "en_US" for translations.')

        # Initialise i18n translations
        global _
        t = gettext.translation('polychromatic-tray-applet', localedir=locale_path, fallback=True)
        _ = t.gettext

    """ Where are the locales? """
    def get_locale_path(self):
        return self.locale_path


class AppIndicator:
    """
    Simple indicator applet which sits in the tray.
    """

    @staticmethod
    def colour_to_hex(colour):
        """
        Converts a tuple to #RRGGBB format

        :param colour: Tuple or list of 3 integers
        :type colour: tuple or list

        :return: Hex String
        :rtype: str
        """
        return "#{0:02X}{1:02X}{2:02X}".format(*colour)

    def __init__(self):
        # Load primary/secondary colours
        primary_r = int(pref.get("primary_colors", "red", 0))
        primary_g = int(pref.get("primary_colors", "green", 255))
        primary_b = int(pref.get("primary_colors", "blue", 0))
        secondary_r = int(pref.get("secondary_colors", "red", 255))
        secondary_g = int(pref.get("secondary_colors", "green", 0))
        secondary_b = int(pref.get("secondary_colors", "blue", 0))

        # Store Colour and active effect
        self.colour = (primary_r, primary_g, primary_b)
        self.secondary_colour = (secondary_r, secondary_g, secondary_b)
        self.active_effect = None
        self.active_device = None

        # Read preferences and profiles.
        self.profiles = polychromatic.profiles.AppProfiles(rclient)

        # Determine which icon to display.
        icon_type = pref.get('tray_applet','icon_type','light')
        icon_fallback = get_data_source() + '/tray/humanity-light.svg'

        if icon_type == 'light':
            icon_path = get_data_source() + '/tray/humanity-light.svg'
        elif icon_type == 'dark':
            icon_path = get_data_source() + '/tray/humanity-dark.svg'
        elif icon_type == 'gtk':
            icon_path = pref.get('tray_applet','icon_path','ibus-keyboard')
        elif icon_type == 'animated':
            icon_path = get_data_source() + '/tray/chroma.gif'
        elif icon_type == 'custom':
            icon_path = pref.get('tray_applet','icon_path')
        else:
            print("Unknown icon type! Rewriting to default.")
            pref.set("tray_applet", "icon_type", "light")
            pref.set("tray_applet", "icon_path", "")
            icon_type = "light"
            icon_path =  icon_fallback

        if not os.path.exists(icon_path) and not icon_type == 'gtk':
            icon_path = icon_fallback
            print("Tray icon missing! Using default")

        # Create the indicator.
        self.ind = appindicator.Indicator.new("polychromatic-tray-applet", icon_path, appindicator.IndicatorCategory.APPLICATION_STATUS)
        self.ind.set_status(appindicator.IndicatorStatus.ACTIVE)

        # Create the menu.
        self.menu = Gtk.Menu()

        # Show the active device's name.
        self.active_device_status = Gtk.MenuItem(_("Unknown Device"))
        self.active_device_status.set_sensitive(False)
        self.active_device_status.show()
        self.menu.append(self.active_device_status)

        sep0 = Gtk.SeparatorMenuItem()
        sep0.show()
        self.menu.append(sep0)

        # Create the devices menu.
        device_item = Gtk.MenuItem(_("Change Device"))
        device_item.show()
        self.device_menu = Gtk.Menu()
        self.device_menu.show()
        device_item.set_submenu(self.device_menu)
        self.menu.append(device_item)

        # Populate the devices menu.
        devman = rclient.DeviceManager()
        devlist = []
        for device in devman.devices:
            devlist.append(device)

            # Collect device data
            name = str(device.name)
            formfactor = str(device.type)
            if formfactor == "firefly":
                formfactor = "mousemat"
            serial = str(device.serial)

            # Create button
            button = Gtk.ImageMenuItem(Gtk.STOCK_NEW, label=name)
            button.show()
            button.connect("activate", self.menuitem_select_device, device)
            img = Gtk.Image()
            icon_path = os.path.join(path.get_data_source(__file__) + "/img/states/normal/", formfactor + ".svg")
            img.set_from_file(icon_path)
            button.set_image(img)
            self.device_menu.append(button)

        self.active_device = devlist[0]
        self.active_device_status.set_label(devlist[0].name)

        # Create effects sub-menu
        effect_item = Gtk.MenuItem(_("Effects"))
        effect_item.show()
        self.effect_menu = Gtk.Menu()
        self.effect_menu.show()
        effect_item.set_submenu(self.effect_menu)
        self.menu.append(effect_item)

        self.effect_menu_items = collections.OrderedDict()
        self.effect_menu_items["spectrum"] = Gtk.RadioMenuItem(group=None, label=_("Spectrum"))
        self.effect_menu_items["wave"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Wave"))
        self.effect_menu_items["reactive"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Reactive"))
        self.effect_menu_items["breath_r"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Breath (Random)"))
        self.effect_menu_items["breath_s"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Breath (Single Color)"))
        self.effect_menu_items["breath_d"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Breath (Dual Color)"))
        self.effect_menu_items["ripple"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Ripple (Single Color)"))
        self.effect_menu_items["ripple_random"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Ripple (Random)"))
        self.effect_menu_items["static"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("Static"))
        self.effect_menu_items["none"] = Gtk.RadioMenuItem(group=self.effect_menu_items["spectrum"], label=_("None"))

        for button_key, button in self.effect_menu_items.items():
            button.connect("activate", self.menuitem_keyboard_effect_response, button_key)
            button.show()
            self.effect_menu.append(button)

        # Create brightness sub-menu
        self.brightness_item = Gtk.MenuItem(_("Brightness"))
        self.brightness_item.show()
        self.brightness_menu = Gtk.Menu()
        self.brightness_menu.show()
        self.brightness_item.set_submenu(self.brightness_menu)
        self.menu.append(self.brightness_item)

        self.brightness_menu_items = collections.OrderedDict()
        self.brightness_menu_items[100] = Gtk.RadioMenuItem(group=None, label=_("Full (100%)"))
        self.brightness_menu_items[75] = Gtk.RadioMenuItem(group=self.brightness_menu_items[100], label=_("Bright (75%)"))
        self.brightness_menu_items[50] = Gtk.RadioMenuItem(group=self.brightness_menu_items[100], label=_("Mid (50%)"))
        self.brightness_menu_items[25] = Gtk.RadioMenuItem(group=self.brightness_menu_items[100], label=_("Dim (25%)"))
        self.brightness_menu_items[0] = Gtk.RadioMenuItem(group=self.brightness_menu_items[100], label=_("Off (0%)"))

        for button_key, button in self.brightness_menu_items.items():
            button.connect("activate", self.menuitem_brightness_response, button_key)
            button.show()
            self.brightness_menu.append(button)

        # Create game mode sub-menu.
        self.game_mode_item = Gtk.MenuItem(_("Game Mode"))
        self.game_mode_item.show()
        self.game_mode_menu = Gtk.Menu()
        self.game_mode_menu.show()
        self.game_mode_item.set_submenu(self.game_mode_menu)
        self.menu.append(self.game_mode_item)

        enable_game_mode_button = Gtk.MenuItem(_("Enable"))
        enable_game_mode_button.connect("activate", self.menuitem_enable_game_mode, True)
        enable_game_mode_button.show()
        self.game_mode_menu.append(enable_game_mode_button)

        disable_game_mode_button = Gtk.MenuItem(_("Disable"))
        disable_game_mode_button.connect("activate", self.menuitem_enable_game_mode, False)
        disable_game_mode_button.show()
        self.game_mode_menu.append(disable_game_mode_button)

        # Create profiles sub-menu.
        self.profiles_button = Gtk.MenuItem(_("Profiles"))
        self.profiles_button.show()
        self.profiles_menu = Gtk.Menu()
        self.profiles_menu.show()
        self.profiles_button.set_submenu(self.profiles_menu)
        self.menu.append(self.profiles_button)
        self.refresh_profiles_menu()

        sep1 = Gtk.SeparatorMenuItem()
        sep1.show()
        self.menu.append(sep1)

        self.macro_button = Gtk.MenuItem(_("Enable Macro Keys"))
        self.macro_button.connect("activate", self.menuitem_enable_macro_buttons_response, "macros")
        self.macro_button.show()
        self.menu.append(self.macro_button)

        sep2 = Gtk.SeparatorMenuItem()
        sep2.show()
        self.menu.append(sep2)

        self.primary_colour_button = Gtk.MenuItem(_("Change Primary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.colour)))
        self.primary_colour_button.connect("activate", self.set_static_colour, 1)
        self.secondary_colour_button = Gtk.MenuItem(_("Change Secondary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.secondary_colour)))
        self.secondary_colour_button.connect("activate", self.set_static_colour, 2)
        self.menu.append(self.primary_colour_button)
        self.menu.append(self.secondary_colour_button)
        self.primary_colour_button.show()
        self.secondary_colour_button.show()

        sep3 = Gtk.SeparatorMenuItem()
        sep3.show()
        self.menu.append(sep3)

        if os.path.exists('/usr/bin/polychromatic-controller'):
            open_config_button = Gtk.MenuItem(_("Open Configuration Utility"))
            open_config_button.connect("activate", self.menuitem_open_config)
            open_config_button.show()
            self.menu.append(open_config_button)

            sep4 = Gtk.SeparatorMenuItem()
            sep4.show()
            self.menu.append(sep4)
        else:
            print('Polychromatic Controller not present. Not integrating to menu.')

        quit_button = Gtk.MenuItem(_("Quit"))
        quit_button.connect("activate", self.quit, "quit")
        quit_button.show()
        self.menu.append(quit_button)

        self.menu.show()
        self.ind.set_menu(self.menu)

        # If the user has preferences, set them.
        self.apply_startup_settings()

        # Disable any options that are not supported by the current device.
        self.refresh_device_support()

    # Shared functions for manipulating the device.
    def set_profile(self, widget, uuid):
        """ Shared function to send the profile to the keyboard """
        # Workaround some strange bug trying to set "status" (group name)?
        if not uuid == 'status':
            name = pref.get(uuid, "name", "", path.profiles)
            self.profiles.send_profile_from_file(self.active_device, uuid)
            self.profile_items['status'].set_label(name)

    def set_effect(self, effect_type):
        """ Shared function to set an effect on the device """
        if effect_type == "breath_r":
            self.active_device.fx.breath_random()
        elif effect_type == "breath_s":
            self.active_device.fx.breath_single(*self.colour)
        elif effect_type == "breath_d":
            self.active_device.fx.breath_dual(*self.colour, *self.secondary_colour)
        elif effect_type == "none":
            self.active_device.fx.none()
        elif effect_type == "reactive":
            self.active_device.fx.reactive(*self.colour, 2)
        elif effect_type == "spectrum":
            self.active_device.fx.spectrum()
        elif effect_type == "static":
            self.active_device.fx.static(*self.colour)
        elif effect_type == "wave":
            self.active_device.fx.wave(1)
        elif effect_type == "ripple":
            self.active_device.fx.ripple(*self.colour)
        elif effect_type == "ripple_random":
            self.active_device.fx.ripple_random()

    # Tray Applet Responses
    def quit(self, widget, data=None):
        """
        Quits the application
        """
        Gtk.main_quit()

    def menuitem_select_device(self, widget, device_object):
        self.active_device = device_object
        self.refresh_device_support()
        name = device_object.name
        self.active_device_status.set_label(name)
        print("Device Changed: " + name)

    def menuitem_keyboard_effect_response(self, widget, effect_type):
        """
        Click event for keyboard effects in the menu

        :param widget: MenuItem object
        :type widget: Gtk.RadioMenuItem

        :param effect_type: Type of effect
        :type effect_type: str
        """
        self.active_effect = effect_type
        if widget.get_active():
            self.set_effect(effect_type)

    def menuitem_brightness_response(self, widget, brightness):
        """
        Sets the brightness for the keyboard

        :param widget: MenuItem object
        :type widget: Gtk.RadioMenuItem

        :param brightness: Brightness value (scaled between 0-255)
        :type brightness: int
        """
        self.active_device.brightness = brightness

    def menuitem_enable_macro_buttons_response(self, widget, string):
        """
        Enable macro keys

        :param widget: MenuItem object
        :type widget: Gtk.MenuItem

        :param string: Unused
        :type string: str
        """
        self.active_device.macro.enable_macros()

    def menuitem_enable_game_mode(self, widget, state):
        """
        Enables or disabled Game mode

        :param widget: MenuItem object
        :type widget: Gtk.MenuItem

        :param enable: Boolean
        :type enable: bool
        """
        self.active_device.game_mode_led = state

    def set_static_colour(self, widget, colour_index):
        """
        Sets the colour for effects.

        :param widget: MenuItem object
        :type widget: Gtk.MenuItem

        :param colour_index: index of colour
        :type colour_index: int
        """
        print("[Change Colour] Current: {0}".format(AppIndicator.colour_to_hex(self.colour)))

        # Create a colour selection dialog
        #colorsel = gtk.ColorSelection()
        color_selection_dlg = Gtk.ColorSelectionDialog(_('Change Static Color'))
        color_selection_result = color_selection_dlg.run()

        # If new colour is chosen.
        if color_selection_result == Gtk.ResponseType.OK:
            color_rgb = color_selection_dlg.get_color_selection().get_current_color()
            # Returns value between 0.0 - 1.0 * 255 = 8-bit RGB Value

            if colour_index == 1:
                self.colour = KeyboardColour.gdk_colour_to_rgb(color_rgb)
                self.primary_colour_button.set_label(_("Change Primary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.colour)))
                print("[Change Primary Colour] New: {0}".format(AppIndicator.colour_to_hex(self.colour)))
            else:
                self.secondary_colour = KeyboardColour.gdk_colour_to_rgb(color_rgb)
                self.secondary_colour_button.set_label(_("Change Secondary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.secondary_colour)))
                print("[Change Secondary Colour] New: {0}".format(AppIndicator.colour_to_hex(self.secondary_colour)))

            # If 'static', 'reactive' or 'breath' mode is set, refresh the effect.
            if self.active_effect == 'static':
                print("[Change Colour] Refreshing Static Mode")
                self.menuitem_keyboard_effect_response(self.effect_menu_items["static"], 'static')
            elif self.active_effect == 'reactive':
                print("[Change Colour] Refreshing Reactive Mode")
                self.menuitem_keyboard_effect_response(self.effect_menu_items["reactive"], 'reactive')
            elif self.active_effect == 'breath':
                print("[Change Colour] Refreshing Breath Mode")
                self.menuitem_keyboard_effect_response(self.effect_menu_items["breath"], 'breath')

        color_selection_dlg.destroy()

    def menuitem_open_config(self, widget):
        """
        Opens the Polychromatic Controller.
        """
        background_process('/usr/bin/polychromatic-controller')

    def refresh_profiles_menu(self):
        profile_list = self.profiles.list_profiles()

        # No profiles found.
        if len(profile_list) == 0:
            self.profiles_status = Gtk.MenuItem(_("No profiles found."))
            self.profiles_status.show()
            self.profiles_menu.append(self.profiles_status)
            self.profiles_status.set_sensitive(False)
            return

        ## Display current profile in use.
        self.profile_items = collections.OrderedDict()
        self.profile_items['status'] = Gtk.RadioMenuItem(group=None, label=_("None Selected"))
        self.profile_items['status'].show()
        self.profiles_menu.append(self.profile_items['status'])
        self.profile_items['status'].set_sensitive(False)

        sep = Gtk.SeparatorMenuItem()
        sep.show()
        self.profiles_menu.append(sep)

        # Function to append to menu.
        def append_item(uuid):
            profile_data = self.profiles.load_profile(uuid)
            try:
                title = profile_data["name"]
            except KeyError:
                title = _("Unknown")
            try:
                icon_path = profile_data["icon"]
            except KeyError:
                icon_path = path.get_data_source(__file__) + "/img/profile-default.svg"
            img = Gtk.Image()
            img.set_from_file(icon_path)
            self.profile_items[uuid] = Gtk.ImageMenuItem(Gtk.STOCK_NEW, label=title)
            self.profile_items[uuid].set_image(img)

        # Sort the profiles A-Z.
        collected_names = {}
        for uuid in profile_list:
            try:
                profile_data = self.profiles.load_profile(uuid)
                title = profile_data["name"]
                collected_names[title] = int(uuid)
            except Exception as e:
                print("Failed to load profile: {0} (Exception: {1})".format(uuid, str(e)))

        for name in sorted(collected_names):
            uuid = collected_names[name]
            append_item(str(uuid))

        for profile_name, button in self.profile_items.items():
            button.connect("activate", self.set_profile, profile_name)
            button.show()
            self.profiles_menu.append(button)

    def apply_startup_settings(self):
        if pref.get('startup', 'enabled', 'false') == 'true':

            # Only run the tray applet start-up options once.
            if not os.path.exists(tray_startup_file):
                open(tray_startup_file, 'a').close()
            else:
                print("Skipping start-up options - They have already been ran this user session.")
                return

            # Load options
            start_effect = pref.get('startup', 'start_effect', 'disabled')
            start_profile = pref.get('startup', 'start_profile', None)
            start_brightness = int(pref.get('startup', 'start_brightness', 0))
            start_macro = pref.get('startup', 'start_macro', 'false')
            start_col1_r = pref.get('primary_colors', 'red', 0)
            start_col1_g = pref.get('primary_colors', 'green', 255)
            start_col1_b = pref.get('primary_colors', 'blue', 0)
            start_col2_r = pref.get('secondary_colors', 'red', 255)
            start_col2_g = pref.get('secondary_colors', 'green', 0)
            start_col2_b = pref.get('secondary_colors', 'blue', 0)

            print('-- Applying start-up settings...')

            self.colour = (start_col1_r, start_col1_g, start_col1_b)
            self.secondary_colour = (start_col2_r, start_col2_g, start_col2_b)

            self.primary_colour_button.set_label(_("Change Primary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.colour)))
            print("[Change Primary Colour] New: {0}".format(AppIndicator.colour_to_hex(self.colour)))

            self.secondary_colour_button.set_label(_("Change Secondary Color...") + " ({0})".format(AppIndicator.colour_to_hex(self.secondary_colour)))
            print("[Change Secondary Colour] New: {0}".format(AppIndicator.colour_to_hex(self.secondary_colour)))

            if not start_effect == 'disabled':
                if start_effect == 'profile':
                    self.set_profile(None, start_profile)
                else:
                    self.set_effect(start_effect)

            if not start_brightness == 0:
                self.active_device.brightness = start_brightness

            if start_macro == 'true':
                self.active_device.macro.enable_macros()

            print('-- Start-up settings applied.')
            return
        else:
            return

    def refresh_device_support(self):
        capabilities = self.active_device.capabilities
        device_type = self.active_device.type

        def set_state(attr, menu_obj, item=None):
            try:
                state = capabilities[attr]
            except:
                # Unsupported feature (e.g. "ripple" on Mamba)
                state = False

            if item:
                menu_obj[item].set_sensitive(state)
            else:
                menu_obj.set_sensitive(state)

        set_state("lighting_spectrum", self.effect_menu_items, "spectrum")
        set_state("lighting_wave", self.effect_menu_items, "wave")
        set_state("lighting_reactive", self.effect_menu_items, "reactive")
        set_state("lighting_breath_random", self.effect_menu_items, "breath_r")
        set_state("lighting_breath_single", self.effect_menu_items, "breath_s")
        set_state("lighting_breath_dual", self.effect_menu_items, "breath_d")
        set_state("lighting_ripple", self.effect_menu_items, "ripple")
        set_state("lighting_ripple", self.effect_menu_items, "ripple_random")
        set_state("lighting_static", self.effect_menu_items, "static")
        set_state("lighting_none", self.effect_menu_items, "none")

        set_state("brightness", self.brightness_item)
        set_state("game_mode_led", self.game_mode_item)
        set_state("macro_mode_led", self.macro_button)

        # Profiles are only available on keyboards.
        if device_type == 'keyboard':
            self.profiles_button.set_sensitive(True)
        else:
            self.profiles_button.set_sensitive(False)

        # Colours can be picked on multi-coloured keyboards.
        set_state("lighting_led_matrix", self.primary_colour_button)
        set_state("lighting_led_matrix", self.secondary_colour_button)


if __name__ == "__main__":
    """
    Main function
    """
    # Kill the process when CTRL+C'd.
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    # Appear as its own process.
    setproctitle.setproctitle('polychromatic-tray-applet')

    # Run start-up options once.
    tray_startup_file = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet-run-once")

    # Write a PID file for restarting later.
    tray_pid_file = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet.pid")
    f = open(tray_pid_file,'w')
    f.write(str(os.getpid()))
    f.close()

    trans = Translations()
    indicator = AppIndicator()

    Gtk.main()

    # Application Closed
    if os.path.exists(tray_pid_file):
        os.remove(tray_pid_file)
    sys.exit(0)
