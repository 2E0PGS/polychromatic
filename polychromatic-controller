#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2016 Luke Horwell <lukehorwell37+code@gmail.com>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, Gdk, WebKit2

import os
import sys
import signal
import json
import gettext
import setproctitle

import razer.daemon_dbus
import razer.keyboard

import polychromatic.preferences as pref
path = pref.Paths()
import polychromatic.profiles


class Translations(object):
    def __init__(self):
        # Use relative translations if available.
        if os.path.exists(os.path.join(data_source, '../locale/')):
            print('Using relative path for translations.')
            self.locale_path = os.path.join(data_source, '../locale/')
        else:
            print('Using "/usr/share/locale/" or falling back to "en_US" for translations.')
            self.locale_path = '/usr/share/locale/'

        # Initialise i18n translations
        global _
        t = gettext.translation('polychromatic-controller', localedir=self.locale_path, fallback=True)
        _ = t.gettext

    """ Pushes a string to the page. """
    def push(self, element, string, append=False):
        # "append=True" is useful for elements that share contents.
        if append:
            app.update_page(element, 'append', "{0}".format(string))
        else:
            app.update_page(element, 'html', "{0}".format(string))

    """ Pushes a string to a variable on the page. """
    def push_var(self, variable, string):
        app.webkit.run_javascript('var {0} = "{1}"'.format(variable, string))


class AppView(WebKit2.WebView):
    """ Initialise WebKit2 """
    def __init__(self):
        # Create WebKit Container
        webkit = WebKit2
        webkit.WebView.__init__(self)

        # Post-actions after pages fully load.
        self.connect('load-changed', self.load_changed_cb)
        self.connect('notify::title', self.title_changed_cb)
        self.connect('context-menu', self.context_menu_cb)
        stdout.vvprint('Initialised WebKit2.')

        # Allows Keyboard SVGs to load.
        self.get_settings().set_property('allow-file-access-from-file-urls', 1)

        # Print console log errors to stdout
        self.get_settings().set_property('enable_write_console_messages_to_stdout', 1)

        # Load the starting page
        default_page = 'menu'
        self.load_uri('file://' + os.path.join(data_source, 'menu.html'))

    """ Callback: Title changed """
    def title_changed_cb(self, view, frame):
        title = self.get_title()
        if title != 'null':
            stdout.vvprint('** Command: ' + title)
            app.process_command(title)
            self.run_javascript('cmd("null")')

    """ Callback: Page changed """
    def load_changed_cb(self, view, frame):
        uri = str(self.get_uri())
        page = uri.rsplit('/', 1)[1].split('.html')[0]
        if not self.is_loading():
            app.current_page = page
            stdout.vvprint(' ** Page Changed: ' + page)
            app.page_loaded()

    """ Callback: Disable context menu """
    def context_menu_cb(self, view, menu, event, htr, user_data=None):
        return True

    """ Collects JavaScript and send altogether """
    class JavaScriptExecutor(object):
        """ Simple class to execute scripts """
        def __init__(self, webkit, script=None, wrapper=None):
            if wrapper is not None:
                self.wrapper = wrapper
            else:
                self.wrapper = "$(document).ready(function(){{{0}}});"
            self.lines = []
            self.webkit = webkit
            stdout.vvprint(' => JSExec: Ready.')

            if script is not None:
                self.add(script)

        """ Adds a line to the collection """
        def add(self, line):
            """
            :param line: Line to execute
            :type line: str

            :return: Returns a copy of the object
            :rtype: JavaScriptExecutor
            """
            line = str(line)
            stdout.vvprint(' => JSExec: Line added: ' + line)

            if line.endswith(';'):
                self.lines.append(line)
            else:
                self.lines.append(line + ';')

            return self

        """ Runs the collection """
        def exec(self):
            payload = str(self)
            stdout.vvprint(' => JSExec: Pushed to page.')
            self.webkit.run_javascript(payload)

        def __lshift__(self, other):
            self.add(other)
            return self

        def __str__(self):
            lines = '\n' + '\n'.join(self.lines) + '\n'
            result = self.wrapper.format(lines)
            return result


class Controller(object):
    """ Initialise the application """
    def __init__(self):
        # Set up the application
        setproctitle.setproctitle('polychromatic-controller')
        self.webkit = AppView()
        self.build_app()
        self.current_page = 'menu'

    """ Assemble the application """
    def build_app(self):
        # Create window
        w = Gtk.Window(title="Polychromatic Controller")
        w.set_wmclass('polychromatic-controller', 'polychromatic-controller')
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_resizable(False)
        try:
            w.set_icon_from_file(os.path.join(data_source, '../install/hicolor/scalable/apps/polychromatic.svg'))
            stdout.vvprint('Window icon set from relative path.')
        except:
            w.set_icon_from_file('/usr/share/icons/hicolor/scalable/apps/polychromatic.svg')
            stdout.vvprint('Window icon set from /usr/share/ path.')

        # Add elements to window
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Scale the application so it looks good on large displays.
        scale = float(pref.get('editor', 'scaling', 1))
        if scale == 1.5:
            self.webkit.set_zoom_level(1.5)
            w.set_size_request(1500, 900)
        elif scale == 2:
            self.webkit.set_zoom_level(2)
            w.set_size_request(2000, 1200)
        elif scale == 2.5:
            self.webkit.set_zoom_level(2.5)
            w.set_size_request(2500, 1500)
        else:
            self.webkit.set_zoom_level(1)
            w.set_size_request(1000, 600)
        stdout.vprint('Program Scale Set: ' + str(scale))

        # Build an auto expanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)
        w.add(b)
        w.connect("delete-event", Gtk.main_quit)
        w.show_all()
        stdout.vvprint('Initialised Window.')

        # Set up Razer daemon
        try:
            # Connect to the DBUS
            stdout.vprint('Initialising Razer DBUS...')
            self.daemon = razer.daemon_dbus.DaemonInterface()

            # Initialise Profiles
            stdout.vprint('Initialising Polychromatic Profiles...')
            self.profiles = polychromatic.profiles.Profiles(self.daemon)

            # Starting page
            self.current_page = 'menu'

            # "Globals"
            self.kb_layout = razer.keyboard.get_keyboard_layout()
            self.reactive_speed = 1
            self.primary_rgb = razer.keyboard.RGB(0, 255, 0)
            self.secondary_rgb = razer.keyboard.RGB(0, 0, 255)
            self.current_effect = 'custom'
            self.last_effect = 'unknown'
            self.open_this_profile = None

            # Set preferred colours
            p_red = pref.get('primary_colors', 'red', 0)
            p_green = pref.get('primary_colors', 'green', 255)
            p_blue = pref.get('primary_colors', 'blue', 0)
            s_red = pref.get('secondary_colors', 'red', 255)
            s_green = pref.get('secondary_colors', 'green', 0)
            s_blue = pref.get('secondary_colors', 'blue', 0)

            self.primary_rgb_values = [p_red, p_green, p_blue]
            self.primary_rgb = razer.keyboard.RGB(p_red, p_green, p_blue)

            self.secondary_rgb_values = [s_red, s_green, s_blue]
            self.secondary_rgb = razer.keyboard.RGB(s_red, s_green, s_blue)
        except Exception as e:
            # Load an error page instead.
            w.hide()
            print('There was a problem initializing the Razer Driver.')
            print('Exception: ' + str(e))
            Dialogues.fatal_error( _("Unable to connect to the Razer driver service.") + \
            "\n" + _("Please check the driver is properly installed and the service is running.") + \
            "\n\n" + _("Exception:") + ' ' + str(e), True)

        # Store as class variables for use later.
        self.window = w

        stdout.vprint('Application Ready.\n')

    """ Run the application """
    def run_app(self):
        # Kills process when CTRL+C'd.
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()

    """ Send jQuery code to page """
    def update_page(self, element, function, parm1=None, parm2=None):
        """ Runs a JavaScript jQuery function on the page,
            ensuring correctly parsed quotes. """
        if parm1 and parm2:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "', '" + parm2.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        if parm1:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        else:
            buffer = '$("' + element + '").' + function + '()'
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)

    """ Requests to change the page """
    def show_menu(self, page):
        self.current_page = page

        # Hide all footer buttons
        for element in ['retry', 'edit-save', 'edit-preview', 'cancel', 'close-window', 'pref-open', 'pref-save']:
            self.update_page('#'+element, 'hide')

        if page == 'menu':
            self.webkit.load_uri('file://' + os.path.join(data_source, 'menu.html'))

        elif page == 'profile_editor':
            self.webkit.load_uri('file://' + os.path.join(data_source, 'profile_editor.html'))

        elif page == 'preferences':
            self.webkit.load_uri('file://' + os.path.join(data_source, 'preferences.html'))

        elif page == 'devices':
            self.webkit.load_uri('file://' + os.path.join(data_source, 'devices.html'))
        else:
            print("Unknown menu '" + page + "'!")

    """ Page Initialisation """
    def page_loaded(self):
        stdout.vvprint(' ** Running post-actions for page: "' + self.current_page + '"...')
        trans.push('#close-window', _("Close"))

        if self.current_page == 'menu':
            # Push strings
            trans.push('#page-header', _("Configure your Keyboard"))
            trans.push('#str-brightness', _("Brightness"))
            trans.push('#str-effects', _("Effects"))
            trans.push('#str-spectrum', _("Spectrum"), True)
            trans.push('#str-wave', _("Wave"), True)
            trans.push('#str-reactive', _("Reactive"), True)
            trans.push('#str-breath', _("Breath"), True)
            trans.push('#breath-random', _("Switch to Random"), True)
            trans.push('#breath-select', _("Choose Colors"), True)
            trans.push('#str-static', _("Static"), True)
            trans.push('#str-color', _("Color:"), True)
            trans.push('.str-custom', _("Custom..."))
            trans.push('.str-none', _("None"), True)
            trans.push('#str-direction', _("Direction:"), True)
            trans.push('#str-left', _("Left"), True)
            trans.push('#str-right', _("Right"), True)
            trans.push('#str-speed', _("Speed:"), True)
            trans.push('#str-slow', _("Slow"), True)
            trans.push('#str-med', _("Medium"), True)
            trans.push('#str-fast', _("Fast"), True)
            trans.push('#str-modes', _("Key Modes"))
            trans.push('#str-game-mode', _("Gaming Mode"))
            trans.push('#game-mode-disable', _("Disable"))
            trans.push('#game-mode-enable', _("Enable"))
            trans.push('#game-mode-tip', _("Disables ALT+F4 and Super key."))
            trans.push('#str-macro-keys', _("Macro Keys"))
            trans.push('#macro-keys-enable', _("Activate"))
            trans.push('#macro-tip', _("Allows usage of the M1-M5 keys."))
            trans.push('#profiles-activate', _("Activate"), True)
            trans.push('#str-profiles', _("Application Profiles"), True)
            trans.push('#profiles-new', _("New"), True)
            trans.push('#profiles-edit', _("Edit"), True)
            trans.push('#profiles-delete', _("Delete"), True)

            trans.push('#dialog-new-title', _("Create New Application Profile"))
            trans.push('#dialog-new-hint', _("Please enter a name for the new profile, and optionally an icon."))
            trans.push('#str-new-name', _("Application:"))
            trans.push('#str-new-icon', _("Icon Path:"))
            trans.push('#str-browse', _("Browse"))
            trans.push('#dialog-new-cancel', _("Cancel"))
            trans.push('#dialog-new-ok', _("Create"))

            trans.push('#dialog-del-title', _("Delete"))
            trans.push('#dialog-del-hint', _("Are you sure you want to delete this?"))
            trans.push('#dialog-del-no', _("Keep"))
            trans.push('#dialog-del-yes', _("Delete"))

            # Page actions
            self.webkit.run_javascript('instantProfileSwitch = false;')
            self.update_page('#profiles-activate', 'show')
            self.refresh_profiles_list()

            # Tell JavaScript whether live profile switching is enabled.
            if pref.get('editor', 'live_switch', 'true') == 'true':
                self.webkit.run_javascript('live_switch = true;')
                self.update_page('#profiles-activate', 'hide')
            else:
                self.webkit.run_javascript('live_switch = false;')

            # Set preview colours with ones from memory.
            p_red = self.primary_rgb_values[0]
            p_green = self.primary_rgb_values[1]
            p_blue = self.primary_rgb_values[2]

            s_red = self.secondary_rgb_values[0]
            s_green = self.secondary_rgb_values[1]
            s_blue = self.secondary_rgb_values[2]

            self.update_page('#rgb_primary_preview', 'css', 'background-color', 'rgba(' + str(p_red) + ',' + str(p_green) + ',' + str(p_blue) + ',1.0)')
            self.update_page('#rgb_secondary_preview', 'css', 'background-color', 'rgba(' + str(s_red) + ',' + str(s_green) + ',' + str(s_blue) + ',1.0)')

        elif self.current_page == 'profile_editor':
            # Push strings
            trans.push('#str-color', _("Color:"))
            trans.push('#str-custom', _("Custom..."))
            trans.push('#cancel', _("Cancel"))
            trans.push('#edit-preview', _("Preview"))
            trans.push('#edit-save', _("Save"), True)

            trans.push_var('str_set', _("Set"))
            trans.push_var('str_set_help', _("Click on a key to assign a color here."))
            trans.push_var('str_picker', _("Picker"))
            trans.push_var('str_picker_help', _("Click on a key to grab its color."))
            trans.push_var('str_clear', _("Clear"))
            trans.push_var('str_clear_help', _("Click on a key to clear."))
            app.webkit.run_javascript("set_mode('set')")

            # Initialise keyboard layout
            js_exec = self.webkit.JavaScriptExecutor(self.webkit)
            kb_callback = self.webkit.JavaScriptExecutor(None, wrapper="keyboard_obj.load(function(){{{0}}});")

            # Set page title
            uuid = self.open_this_profile
            profile_name = pref.get(uuid, "name", "", path.profiles)
            app.update_page("#page-header", "html", _("Edit") + ' ' + profile_name)
            app.update_page("#page-header", "fadeIn")

            # Set keyboard layout
            kb_callback << "keyboard_obj.set_layout(\"kb-" + self.kb_layout + "\")"

            # Load profile into keyboard.
            profile_name = self.open_this_profile
            self.profiles.set_active_profile(profile_name)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.activate_profile_from_memory()
            self.profiles.get_active_profile().backup_configuration()

            for pos_y, row in enumerate(self.profiles.get_profile(profile_name).get_rows_raw()):
                for pos_x, rgb in enumerate(row):
                    js_string = "keyboard_obj.set_key_colour({0},{1},\"#{2:02X}{3:02X}{4:02X}\")".format(pos_y, pos_x, rgb.red, rgb.green, rgb.blue)
                    kb_callback << js_string

            # IF BLACKWIDOW ULTIMATE < 2016
            # OR BLACKWIDOW CHROMA
            # disable space key and FN
            kb_callback << "keyboard_obj.disable_key(5,7)"
            kb_callback << "keyboard_obj.disable_key(5,12)"
            # Hide preview button if live previewing is enabled.
            if pref.get('editor', 'live_preview', 'true') == 'true':
                kb_callback << '$("#edit-preview").hide();'


            kb_callback << "$(\"#cancel\").attr({onclick: \"cmd('cancel-changes?"+ self.cancel_changes + "?" + profile_name + "')\"})"

            js_exec << kb_callback
            js_exec.exec()

        elif self.current_page == 'preferences':
            # Push strings
            trans.push('#page-header', _("Preferences"))
            trans.push('#str-intro', _("Change the application preferences for managing your Razer devices."))
            trans.push('#str-app-settings', _("Application Settings"))
            trans.push('#str-live-switch', _("Enable live switching"), True)
            trans.push('#str-live-switch-help', _("Activate profiles instantly as soon as you click on them."))
            trans.push('#str-live-preview', _("Enable live preview"), True)
            trans.push('#str-live-preview-help', _("While editing, show your changes on the actual keyboard."))
            trans.push('#str-activate-on-save', _("Always activate profiles after saving."), True)
            trans.push('#str-scaling', _("Interface Scale:"))
            trans.push('#str-scaling-help', _("Scale the application so it looks good on large displays."))
            trans.push('#str-tray-applet', _("Tray Applet"))
            trans.push('#str-system-logo', _("System Keyboard"), True)
            trans.push('#str-static-logo', _("Static Green Logo"), True)
            trans.push('#str-animated-logo', _("Animated Chroma Logo"), True)
            trans.push('#str-custom-logo', _("Custom Image"), True)
            trans.push('#tray-custom', _("Custom Icon:"), True)
            trans.push('#str-custom-tip', _("Copy and paste the path to the image you'd like to use. You may need to resize your icon smaller."), True)
            trans.push('#str-restart-tray', _("For changes to take effect, please restart the Tray Applet."))
            trans.push('#str-preferred-cols', _("Preferred Colors"), True)
            trans.push('#str-primary', _("Primary Color:"))
            trans.push('#str-secondary', _("Secondary Color:"))
            trans.push('.str-set', _("Set..."))
            trans.push('#str-startup', _("Start-up Settings"))
            trans.push('#str-startup-hint', _("These settings are applied when the Tray Applet is started. Ensure the tray applet automatically starts when you login."))
            trans.push('#str-enable-startup', _("Set preferences when the tray applet starts."), True)
            trans.push('#str-start-effect', _("Start Effect:"))
            trans.push('#str-disabled', _("No Change"))
            trans.push('#str-spectrum', _("Spectrum"))
            trans.push('#str-wave', _("Wave"))
            trans.push('#str-reactive', _("Reactive"))
            trans.push('#str-breath-r', _("Breath (Random)"))
            trans.push('#str-breath-s', _("Breath (Single Color)"))
            trans.push('#str-breath-d', _("Breath (Dual Color)"))
            trans.push('#str-static', _("Static"))
            trans.push('#str-none', _("None"))
            trans.push('#str-profile-mode', _("Activate a Profile"))
            trans.push('#str-profile', _("Profile:"))
            trans.push('#str-start-bright', _("Start Brightness:"))
            trans.push('#str-auto-macro', _("Automatically enable the macro keys."), True)
            trans.push('#str-advanced', _("Advanced"))
            trans.push('#str-reset-pref', _("Reset Preferences"), True)
            trans.push('#str-reset-all', _("Reset Everything"))
            trans.push('#pref-save', _("OK"), True)

            trans.push_var('del_all_text', _("Are you sure you wish to erase all configuration and profiles?"))
            trans.push_var('no_change', _("No Change"))

            # Populate start-up profiles list.
            self.refresh_profiles_list()

            # Set checkboxes
            for setting in ['live_switch','live_preview','activate_on_save']:
                if pref.get('editor', setting, 'true') == 'true':
                    self.update_page('#'+setting, 'prop', 'checked', 'true')

            # Fetch settings for tray/start-up settings.
            tray_icon_type = pref.get('tray_applet', 'icon_type', 'system')
            tray_icon_path = pref.get('tray_applet', 'icon_path', '')
            start_enabled = pref.get('startup', 'enabled', 'false')
            start_effect = pref.get('startup', 'start_effect', None)
            start_profile = pref.get('startup', 'start_profile', None)
            start_brightness = int(pref.get('startup', 'start_brightness', 0))
            start_macro = pref.get('startup', 'start_macro', 'false')

            # Set value for slider
            scaling = pref.get('editor', 'scaling', 1)
            self.update_page('#scaling', 'val', str(scaling))

            # Set 'values' for textboxes and dropdowns.
            self.update_page('#tray-'+tray_icon_type, 'prop', 'checked', 'true')
            self.update_page('#tray-icon-path', 'val', tray_icon_path)
            self.update_page('#start-effect-dropdown', 'val', start_effect)
            self.update_page('#profiles-list', 'val', start_profile)
            self.update_page('#start-brightness', 'val', str(start_brightness))

            if start_macro == 'true':
                self.update_page('#start-macro', 'prop', 'checked', 'true')

            # Hide/Show UI elements
            if start_enabled == 'true':
                self.update_page('#startup-enabled', 'prop', 'checked', 'true')
                self.update_page('#startup-options', 'show')

            if start_effect == 'profile':
                self.update_page('#start-profile', 'show')
            else:
                self.update_page('#start-profile', 'hide')

            if start_brightness == 0:
                self.update_page('#start-brightness-text', 'html', _("No Change"))
            else:
                self.update_page('#start-brightness-text', 'html', str(int((start_brightness * 100) / 255 )) + '%')

            # Get default 'preferred' colours.
            self.start_p_red =   pref.get('primary_colors', 'red', 0)
            self.start_p_green = pref.get('primary_colors', 'green', 255)
            self.start_p_blue =  pref.get('primary_colors', 'blue', 0)

            self.start_s_red =   pref.get('secondary_colors', 'red', 255)
            self.start_s_green = pref.get('secondary_colors', 'green', 0)
            self.start_s_blue =  pref.get('secondary_colors', 'blue', 0)

            self.update_page('#rgb_start_primary_preview', 'css', 'background-color', 'rgba(' + str(self.start_p_red) + ',' + str(self.start_p_green) + ',' + str(self.start_p_blue) + ',1.0)')
            self.update_page('#rgb_start_secondary_preview', 'css', 'background-color', 'rgba(' + str(self.start_s_red) + ',' + str(self.start_s_green) + ',' + str(self.start_s_blue) + ',1.0)')

        elif self.current_page == 'controller_devices':
            self.detect_devices()

        else:
            stdout.vvprint('No post-actions for this page.')

    """ Reloads the profile list """
    def refresh_profiles_list(self):
        stdout.vvprint('Refreshing profile list...')
        self.update_page('#app-profiles', 'html' , ' ')
        index = pref.load_file(path.profiles)

        # Function to append to page.
        def append_item(uuid):
            css_id = "app-" + uuid
            title = index[uuid]["name"]
            title = title.replace("'", '&#39;').replace('"', '&#39;')
            try:
                icon_path = index[uuid]["icon"]
            except:
                icon_path = path.get_data_source(__file__) + "/img/profile_default.svg"
            if app.current_page == "menu":
                self.update_page('#app-profiles', 'append', "<div class='app-profile-item' id='{0}' onclick='profile_list_change(\"{0}\", \"{3}\", \"{2}\")'><img src='{1}'>{2}</div>".format(css_id, icon_path, title, uuid))
            elif app.current_page == "preferences":
                self.update_page('#profiles-list', 'append', "<option value='{1}'>{0}</option>".format(title, uuid))

        # Sort the profiles A-Z.
        sorted_names = {}
        for uuid in index:
            human_name = index[uuid]['name']
            sorted_names[human_name] = int(uuid)
        item_no = 0
        for program in sorted(sorted_names):
            uuid = sorted_names[program]
            item_no += 1
            append_item(str(uuid))

    """ Process a command """
    def process_command(self, command):
        if command == 'quit':
            quit()

        ## Effects & Keyboard Controls
        elif command.startswith('brightness'):
            value = int(command[11:])
            self.daemon.set_brightness(value)

        elif command.startswith('effect'):
            enabled_options = []

            if command == 'effect-none':
                self.current_effect = "none"
                self.daemon.set_effect('none')

            elif command == 'effect-spectrum':
                self.current_effect = "spectrum"
                self.daemon.set_effect('spectrum')

            elif command.startswith('effect-wave'):
                self.current_effect = "wave"
                wave_direction = int(command.split('?')[1])
                self.daemon.set_effect('wave', wave_direction) # ?1 or ?2 for direction
                enabled_options = ['waves']

            elif command.startswith('effect-reactive'):
                self.current_effect = "reactive"
                if command.split('?')[1] == 'auto':
                    # Use the previous effect
                    self.daemon.set_effect('reactive', self.reactive_speed, self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                else:
                    self.reactive_speed = int(command.split('?')[1])
                    self.daemon.set_effect('reactive', self.reactive_speed, self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                enabled_options = ['rgb_primary', 'reactive-options']

            elif command.startswith('effect-breath'):
                breath_random = int(command.split('?')[1])
                if breath_random == 1:  # Random mode
                    self.current_effect = "breath?random"
                    self.daemon.set_effect('breath', 1)
                    enabled_options = ['breath-select']
                else:
                    self.current_effect = "breath?colours"
                    self.daemon.set_effect('breath',
                                           self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue,
                                           self.secondary_rgb.red, self.secondary_rgb.green, self.secondary_rgb.blue)
                    enabled_options = ['breath-random', 'rgb_primary', 'rgb_secondary']

            elif command == 'effect-static':
                self.current_effect = "static"
                self.daemon.set_effect('static', self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                enabled_options = ['rgb_primary']

            # Fade between options for that effect, should it have been changed.
            if not self.current_effect == self.last_effect:
                # Effect changed, fade out all previous options.
                for element in ['rgb_primary', 'rgb_secondary', 'waves', 'reactive-options', 'breath-random', 'breath-select']:
                    self.update_page('#'+element, 'fadeOut', 'fast')

                # Fade in desired options for this effect.
                for element in enabled_options:
                    self.webkit.run_javascript("setTimeout(function(){ $('#" + element + "').fadeIn('fast');}, 200)")
            self.last_effect = self.current_effect

        elif command == 'enable-marco-keys':
            self.daemon.marco_keys(True)
            self.update_page('#macro-keys-enable', 'addClass', 'btn-disabled')
            self.update_page('#macro-keys-enable', 'html', "In Use")

        elif command == 'gamemode-enable':
            self.daemon.game_mode(True)
            self.update_page('#game-mode-status', 'html', 'Enabled')
            self.update_page('#game-mode-enable', 'hide')
            self.update_page('#game-mode-disable', 'show')

        elif command == 'gamemode-disable':
            self.daemon.game_mode(False)
            self.update_page('#game-mode-status', 'html' 'Disabled')
            self.update_page('#game-mode-enable', 'show')
            self.update_page('#game-mode-disable', 'hide')

        ## Changing colours for this session.
        elif command.startswith('ask-color'):
            element = command.split('?')[1]
            picker = Dialogues.color_picker()
            if picker == None:
                return
            else:
                picker = picker.split(',')
            command = "set-color?{0}?{1}?{2}?{3}".format(element, picker[0], picker[1], picker[2])
            self.process_command(command)

        elif command.startswith('set-color'):
            """ Expects 4 parameters separated by '?' in order: element, red, green, blue (RGB = 0-255) """
            update_effects = False
            colors = command.split('set-color?')[1]
            element = colors.split('?')[0]
            red = int(colors.split('?')[1])
            green = int(colors.split('?')[2])
            blue = int(colors.split('?')[3])
            print("Set colour of '{0}' to RGB: {1}, {2}, {3}".format(element, red, green, blue))

            self.update_page('#'+element+'_preview', 'css', 'background-color', 'rgba(' + str(red) + ',' + str(green) + ',' + str(blue) + ',1.0)')
            if app.current_page == 'profile_editor':
                self.webkit.run_javascript('set_mode("set")')

            if element == 'rgb_primary':    # Primary effect colour
                update_effects = True
                self.primary_rgb.set((red, green, blue))
                self.primary_rgb_values = [red, green, blue]

            elif element == 'rgb_secondary':   # Secondary effect colour (used for Breath mode)
                update_effects = True
                self.secondary_rgb.set((red, green, blue))
                self.secondary_rgb_values = [red, green, blue]

            elif element == 'rgb_tmp':      # Temporary colour while editing profiles.
                rgb_edit_red = red
                rgb_edit_green = green
                rgb_edit_blue = blue

            elif element == 'rgb_start_primary':  # Starting primary colour specified in Preferences.
                self.start_p_red =   red
                self.start_p_green = green
                self.start_p_blue =  blue

            elif element == 'rgb_start_secondary':  # Starting secondary colour specified in Preferences.
                self.start_s_red =   red
                self.start_s_green = green
                self.start_s_blue =  blue

            # Update static colour effects if currently in use.
            if update_effects:
                if self.current_effect == 'static':
                    self.process_command('effect-static')
                elif self.current_effect == 'breath?colours':
                    self.process_command('effect-breath?0')
                elif self.current_effect == 'reactive':
                    self.process_command('effect-reactive?auto')

        ## Cancel to main menu.
        ## '?xxxx' may specify changes to also make when leaving application profile editor.
        elif command.startswith('cancel-changes'):
            if command.find('?') > -1:
                command, cancel_type, cancel_args = command.split('?')

                if cancel_type == "new-profile":
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        self.profiles.remove_profile(self.open_this_profile)
                        self.daemon.set_custom_colour(self.old_profile)
                elif cancel_type == "edit-profile":
                    self.profiles.get_active_profile().restore_configuration()
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        self.daemon.set_custom_colour(self.old_profile)

                self.update_page('#cancel', 'attr', '{onclick: \"cmd(\'cancel-changes\')\"}')
            self.show_menu('menu')

        ## Preferences
        elif command == 'pref-open':
            self.show_menu('preferences')

        elif command.startswith('web'):
            print('web')
            target = command.split('web?')[1]
            os.system('xdg-open "' + target + '"')

        elif command.startswith('pref-set?'):
            # pref-set ? <group> ? <setting> ? <value>
            group = command.split('?')[1]
            setting = command.split('?')[2]
            value = command.split('?')[3]
            pref.set(group, setting, value)

        elif command == 'pref-close':
            # Saves data still in memory.
            pref.set('primary_colors', 'red', self.start_p_red)
            pref.set('primary_colors', 'green', self.start_p_green)
            pref.set('primary_colors', 'blue', self.start_p_blue)

            pref.set('secondary_colors', 'red', self.start_s_red)
            pref.set('secondary_colors', 'green', self.start_s_green)
            pref.set('secondary_colors', 'blue', self.start_s_blue)

            self.show_menu('menu')

        elif command == 'pref-reset-conf':
            print('User requested to reset configuration.')
            pref.create_default_config()
            pref.load_pref()
            print('Configuration successfully reset.')
            self.show_menu('preferences')

        elif command == 'pref-reset-all':
            print('User requested to reset everything.')
            pref.clear_config()
            print('\nRestarting the application...\n')
            os.execv(__file__, sys.argv)

        ## Profile Editor / Management
        elif command.startswith('profile-edit'):
            self.open_this_profile = command.split('profile-edit?')[1].replace('%20', ' ')
            self.old_profile = self.profiles.get_active_profile()
            self.cancel_changes = 'edit-profile'
            if self.open_this_profile is not None:
                self.show_menu('profile_editor')
            else:
                print('Refusing to open empty filename profile.')

        elif command.startswith('set-key'):
            # Parse position/colour information
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])
            color = command.split('?')[3]

            red = int(color.strip('rgb()').split(',')[0])
            green = int(color.strip('rgb()').split(',')[1])
            blue = int(color.strip('rgb()').split(',')[2])
            rgb = (red, green, blue)

            # Write to memory
            self.profiles.get_active_profile().set_key_colour(row, col, rgb)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.activate_profile_from_memory()

        elif command.startswith('clear-key'):
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])

            self.profiles.get_active_profile().reset_key(row, col)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.activate_profile_from_memory()

        elif command.startswith('profile-activate'):
            command = command.replace('%20',' ')
            uuid = command.split('profile-activate?')[1]
            self.webkit.run_javascript('set_cursor("html","wait")')
            self.profiles.activate_profile_from_file(uuid)
            self.update_page('#custom', 'html', 'Profile - ' + uuid)
            self.update_page('#custom', 'prop', 'checked', 'true')
            self.webkit.run_javascript('set_cursor("html","normal")')

        elif command == 'profile-preview':
            self.profiles.activate_profile_from_memory()

        elif command.startswith('profile-del'):
            uuid = command.split('?')[1]
            self.profiles.remove_profile(uuid)
            self.refresh_profiles_list()

        elif command.startswith('profile-new'):
            profile_name = command.split(';')[1].replace('%20', ' ')
            profile_icon = command.split(';')[2].replace('%20', ' ')
            uuid = self.profiles.new_profile()

            self.cancel_changes = 'new-profile'
            self.old_profile = self.profiles.get_active_profile()
            self.open_this_profile = uuid
            self.profiles.set_metadata(uuid, "name", profile_name)
            self.profiles.set_metadata(uuid, "icon", profile_icon)
            self.show_menu('profile_editor')

        elif command == 'profile-save':
            profile_name = self.profiles.get_active_profile_name()
            print('Saving profile "{0}" ...'.format(profile_name))
            self.profiles.save_profile(profile_name)
            print('Saved "{0}".'.format(profile_name))
            self.show_menu('menu')

            if pref.get('editor', 'activate_on_save', 'true') == 'true':
                self.profiles.activate_profile_from_file(self.profiles.get_active_profile_name())

        ## Open the file browser and return a successful path to that div.
        elif command.startswith("browse-file"):
            div_id = command.split('?')[1]
            path = Dialogues.file_picker(_("Choose an icon to represent this application."), 'image')
            if path != None:
                app.update_page('#'+div_id, 'val', path)
            else:
                return

        ## Miscellaneous
        elif command == 'open-config-folder':
            os.system('xdg-open "' + path.root + '"')

        else:
            print("Unimplemented command: " + command)


class Dialogues(object):
    def fatal_error(message, do_quit=False):
        dialog = Gtk.MessageDialog(type = Gtk.MessageType.ERROR, buttons = Gtk.ButtonsType.OK)
        dialog.set_title("Polychromatic Controller")
        dialog.set_markup(message)
        dialog.run()
        dialog.destroy()
        if do_quit:
            sys.exit()

    def color_picker():
        # TODO: Ability to track and set last colour in GTK dialog.
        colorseldlg = Gtk.ColorSelectionDialog(_("Choose a Colour"))
        colorsel = colorseldlg.get_color_selection()

        if colorseldlg.run() == Gtk.ResponseType.OK:
            color = colorsel.get_current_color()
            red = int(color.red / 256)
            green = int(color.green / 256)
            blue = int(color.blue / 256)
            colorseldlg.destroy()
            return "{0},{1},{2}".format(str(red),str(green),str(blue))
        else:
            colorseldlg.destroy()
            return None

    def file_picker(help_text, filter_mode):
        #   help_text   =   String displayed in dialog title.
        #   filters     =   Predefined filters (e.g. 'image')

        win = Gtk.Window(title=_("Polychromatic Controller"))
        dialog = Gtk.FileChooserDialog(help_text, app.window, Gtk.FileChooserAction.OPEN, \
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
                                      )
        # Setup filters
        if filter_mode == 'image':
            a = Gtk.FileFilter()
            a.set_name("JPEG " + _("Image"))
            a.add_mime_type("image/jpeg")
            dialog.add_filter(a)

            b = Gtk.FileFilter()
            b.set_name("PNG " + _("Image"))
            b.add_mime_type("image/png")
            dialog.add_filter(b)

            c = Gtk.FileFilter()
            c.set_name("GIF " + _("Image"))
            c.add_mime_type("image/gif")
            dialog.add_filter(c)

            d = Gtk.FileFilter()
            d.set_name("SVG " + _("Image"))
            d.add_mime_type("image/svg+xml")
            dialog.add_filter(d)

        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            path = dialog.get_filename()
            dialog.destroy()
            return path
        else:
            dialog.destroy()
            return None


class Terminal(object):
    """ Process arguments passed via the terminal. """
    def __init__(self):
        self.be_verbose = False
        self.be_very_verbose = False

        for arg in sys.argv[1:]:
            if arg == '--help' or arg == '-h':
                self.show_help()

            elif arg == '--verbose' or arg == '-v':
                self.be_verbose = True
                self.vprint('Verbose enabled.')

            elif arg == '-vv' or arg == '--debug':
                self.be_verbose = True
                self.be_very_verbose = True
                self.vvprint('Debug verbose enabled.')

            else:
                print('Ignoring unrecognised parameters:' + arg)

    def show_help(self):
      print('\nPolychromatic Controller Arguments\n')
      print('\nUsage: polychromatic-controller [arguments]')
      #     | Command                      | Help Text                                     |
      print('  -h, --help                   Show this help text.')
      print('  -v, --verbose                Be verbose to stdout.')
      print('  -vv, --debug                 Be very verbose. For debugging only.')
      print('')
      exit()

    def vprint(self, text):
        if self.be_verbose:
            print(text)

    def vvprint(self, text):
        if self.be_very_verbose:
            print(text)


if __name__ == "__main__":
    data_source = path.get_data_source(__file__)
    trans = Translations()
    stdout = Terminal()
    app = Controller()
    app.run_app()
