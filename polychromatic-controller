#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2016 Luke Horwell <luke@ubuntu-mate.org>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, Gdk, WebKit2

import os
import sys
import glob
import signal
import json
import gettext
import setproctitle
setproctitle.setproctitle('polychromatic-controller')
from subprocess import Popen as background_process

import razer.client as rclient
from razer_daemon.keyboard import get_keyboard_layout
from razer_daemon.keyboard import RGB

import polychromatic.preferences as pref
path = pref.Paths()
import polychromatic.profiles

version = "0.3.1"

class Translations(object):
    def __init__(self):
        # Use relative translations if available.
        if os.path.exists(os.path.join(data_source, '../locale/')):
            print('Using relative path for translations.')
            self.locale_path = os.path.join(data_source, '../locale/')
        else:
            print('Using "/usr/share/locale/" or falling back to "en_US" for translations.')
            self.locale_path = '/usr/share/locale/'

        # Initialise i18n translations
        global _
        t = gettext.translation('polychromatic-controller', localedir=self.locale_path, fallback=True)
        _ = t.gettext

    """ Pushes a string to the page. """
    def push(self, element, string, append=False):
        # "append=True" is useful for elements that share contents.
        if append:
            app.update_page(element, 'append', "{0}".format(string))
        else:
            app.update_page(element, 'html', "{0}".format(string))

    """ Pushes a string to a variable on the page. """
    def push_var(self, variable, string):
        app.webkit.run_javascript('var {0} = "{1}"'.format(variable, string))


class AppView(WebKit2.WebView):
    """ Initialise WebKit2 """
    def __init__(self, startpage):
        # Create WebKit Container
        webkit = WebKit2
        webkit.WebView.__init__(self)

        # Post-actions after pages fully load.
        self.connect('load-changed', self.load_changed_cb)
        self.connect('notify::title', self.title_changed_cb)
        self.connect('context-menu', self.context_menu_cb)
        stdout.vvprint('Initialised WebKit2.')

        # Allows Keyboard SVGs to load.
        self.get_settings().set_property('allow-file-access-from-file-urls', 1)

        # Print console log errors to stdout
        self.get_settings().set_property('enable_write_console_messages_to_stdout', 1)

        # Load the starting page
        default_page = 'menu'
        self.load_uri('file://' + os.path.join(data_source, 'pages/' + startpage + '.html'))

    """ Callback: Title changed """
    def title_changed_cb(self, view, frame):
        title = self.get_title()
        if title != 'null':
            stdout.vvprint('** Command: ' + title)
            app.process_command(title)
            self.run_javascript('cmd("null")')

    """ Callback: Page changed """
    def load_changed_cb(self, view, frame):
        uri = str(self.get_uri())
        try:
            page = uri.rsplit('/', 1)[1].split('.html')[0]
        except IndexError:
            return
        if not self.is_loading():
            app.current_page = page
            stdout.vvprint(' ** Page Changed: ' + page)
            app.page_loaded()

    """ Callback: Disable context menu """
    def context_menu_cb(self, view, menu, event, htr, user_data=None):
        return True

    """ Collects JavaScript and send altogether """
    class JavaScriptExecutor(object):
        """ Simple class to execute scripts """
        def __init__(self, webkit, script=None, wrapper=None):
            if wrapper is not None:
                self.wrapper = wrapper
            else:
                self.wrapper = "$(document).ready(function(){{{0}}});"
            self.lines = []
            self.webkit = webkit
            stdout.vvprint(' => JSExec: Ready.')

            if script is not None:
                self.add(script)

        """ Adds a line to the collection """
        def add(self, line):
            """
            :param line: Line to execute
            :type line: str

            :return: Returns a copy of the object
            :rtype: JavaScriptExecutor
            """
            line = str(line)
            stdout.vvprint(' => JSExec: Line added: ' + line)

            if line.endswith(';'):
                self.lines.append(line)
            else:
                self.lines.append(line + ';')

            return self

        """ Runs the collection """
        def exec(self):
            payload = str(self)
            stdout.vvprint(' => JSExec: Pushed to page.')
            self.webkit.run_javascript(payload)

        def __lshift__(self, other):
            self.add(other)
            return self

        def __str__(self):
            lines = '\n' + '\n'.join(self.lines) + '\n'
            result = self.wrapper.format(lines)
            return result


class Controller(object):
    """ Initialise the application """
    def __init__(self):
        # Set up variables
        self.current_page = 'menu'
        self.kb_layout = get_keyboard_layout()
        self.reactive_speed = 1
        self.primary_rgb = RGB(0, 255, 0)
        self.secondary_rgb = RGB(0, 0, 255)
        self.current_effect = 'custom'
        self.last_effect = 'unknown'

        # Is this application installed in /usr/share or ran from repository?
        if os.path.exists(os.path.join(path.get_data_source(__file__) + "/../install/update.sh")):
            self.app_installed = False
        else:
            self.app_installed = True

        # Prepare devices
        try:
            self.devman = rclient.DeviceManager()
        except rclient.DaemonNotFound:
            self.devman = None
            self.devman_error = "not-running"
        except Exception as e:
            self.devman = None
            self.devman_error = "presume-crashed"
            self.devman_reason = str(e)

        # Set up the application
        self.webkit = AppView(self.current_page)
        self.build_app()

        # Display an upgrade message if using the old daemon.
        if os.path.exists("/usr/lib/python3/dist-packages/razer/inteface/keyboard.py") or os.path.exists(os.path.join(sys.path[-1], "/razer/inteface/keyboard.py")):
            self.show_error_page(
                "normal", "upgrade", _("Daemon Upgrade Required"),
                _("The Razer 'Chroma' driver and daemon currently installed on your system is no longer supported by Polychromatic.") + "<br><br>" +
                _("Please remove the current Razer driver/daemon from your system, then install the new one from: ") +
                '<a onclick="cmd(\'web?http://terrycain.github.io/razer-drivers/\')">http://terrycain.github.io/razer-drivers/</a>' +
                '<br><br><a onclick="cmd(\'web?https://github.com/lah7/polychromatic/releases/tag/v0.3.0\')">' +
                _("For more information, see the Release Notes for v0.3.0.") + '</a>')
            return

        # Display an error message if the daemon is having problems on the system.
        if not self.devman:
            print("Could not connect to the daemon's device manager!")

            if self.devman_error == "not-running":
                self.show_error_page(
                     "serious", "generic", _("Daemon Not Running"),
                     _("Polychromatic uses the daemon to interact with your Razer devices, but it doesn't appear to be running.") + "<br><br>" +
                     _("Try starting the daemon from the terminal:") +
                     '<br><code>razer-service</code>')
                return

            if self.devman_error == "presume-crashed":
                self.show_error_page(
                     "serious", "generic", _("Daemon Not Responding"),
                     _("Polychromatic could not initialise the daemon. This could be caused by a bug with the daemon process.") + "<br><br>" +
                     _("Exception:") + ' <code>' + self.devman_reason + '</code>')
                return

    """ Assemble the application """
    def build_app(self):
        # Create window
        w = Gtk.Window(title="Polychromatic Controller")
        w.set_wmclass('polychromatic-controller', 'polychromatic-controller')
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_resizable(False)
        try:
            w.set_icon_from_file(os.path.join(data_source, '../install/hicolor/scalable/apps/polychromatic.svg'))
            stdout.vvprint('Window icon set from relative path.')
        except:
            w.set_icon_from_file('/usr/share/icons/hicolor/scalable/apps/polychromatic.svg')
            stdout.vvprint('Window icon set from /usr/share/ path.')

        # Add elements to window
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Scale the application so it looks good on large displays.
        scale = float(pref.get('editor', 'scaling', 1))
        if scale == 1.5:
            self.webkit.set_zoom_level(1.5)
            w.set_size_request(1500, 900)
        elif scale == 2:
            self.webkit.set_zoom_level(2)
            w.set_size_request(2000, 1200)
        elif scale == 2.5:
            self.webkit.set_zoom_level(2.5)
            w.set_size_request(2500, 1500)
        else:
            self.webkit.set_zoom_level(1)
            w.set_size_request(1000, 600)
        stdout.vprint('Program Scale Set: ' + str(scale))

        # Build an auto expanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)
        w.add(b)
        w.connect("delete-event", Gtk.main_quit)
        w.show_all()
        stdout.vvprint('Initialised Window.')

        # Initialise Profiles
        stdout.vprint('Initialising Polychromatic Profiles...')
        self.profiles = polychromatic.profiles.AppProfiles(rclient)
        self.profiles.selected_uuid = None
        self.profiles.previous_uuid = None

        # Set preferred colours
        p_red = pref.get('primary_colors', 'red', 0)
        p_green = pref.get('primary_colors', 'green', 255)
        p_blue = pref.get('primary_colors', 'blue', 0)
        s_red = pref.get('secondary_colors', 'red', 255)
        s_green = pref.get('secondary_colors', 'green', 0)
        s_blue = pref.get('secondary_colors', 'blue', 0)

        self.primary_rgb_values = [p_red, p_green, p_blue]
        self.primary_rgb = RGB(p_red, p_green, p_blue)

        self.secondary_rgb_values = [s_red, s_green, s_blue]
        self.secondary_rgb = RGB(s_red, s_green, s_blue)

        # Prepare multiple device support
        if self.devman:
            self.devices = self.get_devices()
            if len(self.devices) == 0:
                self.active_device = None
                self.active_ui_device = None
            else:
                self.active_device = self.devices[0]
                self.active_ui_device = self.devices[0].serial

        # Store as class variables for use later.
        self.window = w

        stdout.vprint('Application Ready.\n')

    """ Run the application """
    def run_app(self):
        # Kills process when CTRL+C'd.
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()

    """ Send jQuery code to page """
    def update_page(self, element, function, parm1=None, parm2=None):
        """ Runs a JavaScript jQuery function on the page,
            ensuring correctly parsed quotes. """
        if parm1 and parm2:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "', '" + parm2.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        if parm1:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        else:
            buffer = '$("' + element + '").' + function + '()'
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)

    """ Requests to change the page """
    def show_menu(self, page):
        self.current_page = page

        page_path = os.path.join(data_source, 'pages', page + '.html')
        if os.path.exists(page_path):
            self.webkit.load_uri('file://' + page_path)
        else:
            print("Unknown menu: " + page)

    """ Page Initialisation """
    def page_loaded(self):
        stdout.vvprint(' ** Running post-actions for page: "' + self.current_page + '"...')
        trans.push('#close-window', _("Close"))

        if self.current_page == 'menu':
            # Push strings
            trans.push('#page-header', _("Configure your Device"))
            trans.push('#str-brightness', _("Brightness"))
            trans.push('#str-effects', _("Effects"))
            trans.push('#str-spectrum', _("Spectrum"))
            trans.push('#str-wave', _("Wave"))
            trans.push('#str-reactive', _("Reactive"))
            trans.push('#str-breath', _("Breath"))
            trans.push('#str-pulsate', _("Pulsate"))
            trans.push('#str-ripple', _("Ripple"))
            trans.push('#str-static', _("Static"))

            trans.push('#str-color', _("Color:"), True)
            trans.push('.str-custom', _("Custom..."))
            trans.push('.str-none', _("None"), True)
            trans.push('#str-direction', _("Direction:"), True)
            trans.push('#str-left', _("Left"), True)
            trans.push('#str-right', _("Right"), True)
            trans.push('#str-speed', _("Speed:"), True)
            trans.push('.str-random', _("Random"), True)
            trans.push('.str-single-col', _("Single Color"), True)
            trans.push('#str-dual-col', _("Dual Colors"), True)
            trans.push('#str-cycles', _("Cycle:"), True)
            trans.push('#str-colors', _("Colors:"), True)
            trans.push('#str-slow', _("Slow"), True)
            trans.push('#str-med', _("Medium"), True)
            trans.push('#str-fast', _("Fast"), True)

            trans.push('#str-modes', _("Key Modes"))
            trans.push('#str-game-mode', _("Gaming Mode"))
            trans.push('#game-mode-disable', _("Disable"))
            trans.push('#game-mode-enable', _("Enable"))
            trans.push('#game-mode-tip', _("Disables ALT+F4 and Super key."))
            trans.push('#str-macro-keys', _("Macro Keys"))
            trans.push('#macro-keys-enable', _("Activate"))
            trans.push('#profiles-activate', _("Activate"), True)
            trans.push('.str-help', _("Help"))

            trans.push('#str-profiles', _("Application Profiles"), True)
            trans.push('#profiles-new', _("New"), True)
            trans.push('#profiles-edit', _("Edit"), True)
            trans.push('#profiles-delete', _("Delete"), True)

            trans.push('#dialog-new-title', _("Create New Application Profile"))
            trans.push('#dialog-new-hint', _("Please enter a name for the new profile, and optionally an icon."))
            trans.push('#str-new-name', _("Application:"))
            trans.push('#str-new-icon', _("Icon Path:"))
            trans.push('#str-fetch-launcher', _("Select Installed Application"))
            trans.push('#dialog-new-cancel', _("Cancel"))
            trans.push('#dialog-new-ok', _("Create"))

            trans.push('#dialog-del-title', _("Delete"))
            trans.push('#dialog-del-hint', _("Are you sure you want to delete this?"))
            trans.push('#dialog-del-no', _("Keep"))
            trans.push('#dialog-del-yes', _("Delete"))

            trans.push('#dialog-applauncher-title', _("Choose an Application"))
            trans.push('#dialog-applauncher-hint', _("The information from the chosen program will be used as the profile's base."))
            trans.push('#dialog-applauncher-revert', _("Cancel"))
            trans.push('#dialog-applauncher-ok', _("Select"))

            trans.push('#dialog-help-title', _("Quick Help"))
            # Just the macro keys are present here.
            trans.push('#dialog-help-subtitle', _("Macro Keys Usage"))
            trans.push('#dialog-help-body', _("When macro keys are enabled, the keyboard's M1-M5 keys will be accessible by other programs.") +
            '<br><br>' +
            _("You can also use on-the-fly macro recording (provided by the daemon) by following these steps:") +
            '<ol><li>FN + <div class="macro-key"></div> ' + _("to enter macro mode.") + '</li>' +
            '<li>' + _("Press the macro key to assign to. E.g. M1") +'</li>' +
            '<li>' + _("Typing in your key combination.") +'</li>' +
            '<li>' + _("Exiting macro mode with ") + ' FN + <div class="macro-key"></div></li></ol>')
            trans.push('#dialog-help-close', _("Close"))

            trans.push('#str-browse-icon', _("Browse Icon"))

            # Page actions
            self.webkit.run_javascript('instantProfileSwitch = false;')
            self.update_page('#profiles-activate', 'show')
            self.refresh_device_list()
            self.refresh_profiles_list()

            # Tell JavaScript whether live profile switching is enabled.
            if pref.get('editor', 'live_switch', 'true') == 'true':
                self.webkit.run_javascript('live_switch = true;')
                self.update_page('#profiles-activate', 'hide')
            else:
                self.webkit.run_javascript('live_switch = false;')

            # Set preview colours with ones from memory.
            p_red = self.primary_rgb_values[0]
            p_green = self.primary_rgb_values[1]
            p_blue = self.primary_rgb_values[2]

            s_red = self.secondary_rgb_values[0]
            s_green = self.secondary_rgb_values[1]
            s_blue = self.secondary_rgb_values[2]

            self.update_page('#rgb_primary_preview', 'css', 'background-color', 'rgba(' + str(p_red) + ',' + str(p_green) + ',' + str(p_blue) + ',1.0)')
            self.update_page('#rgb_secondary_preview', 'css', 'background-color', 'rgba(' + str(s_red) + ',' + str(s_green) + ',' + str(s_blue) + ',1.0)')

            # Hide unsupported options for active device.
            self.update_device_supported_features()

        elif self.current_page == 'profile_editor':
            # Push strings
            trans.push('#str-color', _("Color:"))
            trans.push('#str-custom', _("Custom..."))
            trans.push('#cancel', _("Cancel"))
            trans.push('#edit-preview', _("Preview"))
            trans.push('#edit-save', _("Save"), True)

            trans.push_var('str_set', _("Set"))
            trans.push_var('str_set_help', _("Click on a key to assign a color here."))
            trans.push_var('str_picker', _("Picker"))
            trans.push_var('str_picker_help', _("Click on a key to grab its color."))
            trans.push_var('str_clear', _("Clear"))
            trans.push_var('str_clear_help', _("Click on a key to clear."))
            app.webkit.run_javascript("set_mode('set')")

            trans.push('#str-edit-profile', _("Edit"), True)
            trans.push('#dialog-rename-title', _("Edit Profile Details"))
            trans.push('#dialog-rename-hint', _("Change the name and icon for this profile."))
            trans.push('#str-rename-name', _("Name:"))
            trans.push('#str-rename-icon', _("Icon Path:"))
            trans.push('#dialog-rename-cancel', _("Discard"))
            trans.push('#dialog-rename-ok', _("Save Changes"))
            trans.push('#str-browse-icon', _("Browse Icon"))

            # Initialise keyboard layout
            js_exec = self.webkit.JavaScriptExecutor(self.webkit)
            kb_callback = self.webkit.JavaScriptExecutor(None, wrapper="keyboard_obj.load(function(){{{0}}});")

            # Collect profile details.
            uuid = self.profiles.selected_uuid
            app.webkit.run_javascript("var selected_profile = '{0}'".format(uuid))
            profile_path = os.path.join(path.profile_folder, str(uuid) + ".json")
            self.profiles.memory = pref.load_file(profile_path)
            profile_data = self.profiles.memory
            profile_name = profile_data["name"]
            profile_icon = profile_data["icon"]

            # Set profile title on page
            app.update_page("#profile-name", "html", profile_name)
            app.update_page("#profile-name", "fadeIn")

            # Set profile icon on page
            app.update_page("#profile-icon", "attr", "src", profile_icon)
            app.update_page("#profile-icon", "fadeIn")

            # Set keyboard layout
            kb_callback << "keyboard_obj.set_layout(\"kb-" + self.kb_layout + "\")"

            # Load profile into keyboard.
            self.profiles.selected_uuid = uuid
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, profile_data)

            for row in range(0, 6):
                for col in range(0, 22):
                    red = profile_data["rows"][str(row)][col][0]
                    green = profile_data["rows"][str(row)][col][1]
                    blue = profile_data["rows"][str(row)][col][2]
                    js_string = "keyboard_obj.set_key_colour({0},{1},\"#{2:02X}{3:02X}{4:02X}\")".format(row, col, red, green, blue)
                    kb_callback << js_string

            # IF BLACKWIDOW ULTIMATE < 2016
            # OR BLACKWIDOW CHROMA
            # disable space key and FN
            kb_callback << "keyboard_obj.disable_key(5,7)"
            kb_callback << "keyboard_obj.disable_key(5,12)"

            # Hide preview button if live previewing is enabled.
            if pref.get('editor', 'live_preview', 'true') == 'true':
                kb_callback << '$("#edit-preview").hide();'

            kb_callback << "$(\"#cancel\").attr({onclick: \"cmd('cancel-changes?"+ self.cancel_changes + "?" + uuid + "')\"})"

            js_exec << kb_callback
            js_exec.exec()

        elif self.current_page == 'preferences':
            # Push strings
            trans.push('#page-header', _("Preferences"))
            trans.push('#str-about', _("About"))
            trans.push('#str-version-app', _("Application Version:"))
            trans.push('#str-version-config', _("Configuration Version:"))
            trans.push('#str-version-lib', _("Razer Python Library:"))
            trans.push('#str-version-daemon', _("Daemon:"))
            trans.push('#update-button', _("Check for Updates"))
            trans.push('#changelog-button', _("View Change Log"))
            trans.push('#str-app-profiles', _("Application Profiles"))
            trans.push('#str-live-switch', _("Enable live switching"), True)
            trans.push('#str-live-switch-help', _("Activate profiles instantly as soon as you click on them."))
            trans.push('#str-live-preview', _("Enable live preview"), True)
            trans.push('#str-live-preview-help', _("While editing, show your changes on the actual keyboard."))
            trans.push('#str-activate-on-save', _("Always activate profiles after saving."), True)
            trans.push('#str-scaling', _("Interface Scale:"))
            trans.push('#str-scaling-help', _("Scale the application so it looks good on large displays."))
            trans.push('#str-tray-applet', _("Tray Applet"))
            trans.push('#str-tray-light', _("Light Keyboard"), True)
            trans.push('#str-tray-dark', _("Dark Keyboard"), True)
            trans.push('#str-tray-animated', _("Chroma Keyboard"), True)
            trans.push('#str-tray-custom', _("Use Custom Image"), True)
            trans.push('#tray-custom', _("Custom Icon:"), True)
            trans.push('#str-preferred-cols', _("Preferred Colors"), True)
            trans.push('#str-primary', _("Primary Color:"))
            trans.push('#str-secondary', _("Secondary Color:"))
            trans.push('.str-set', _("Set..."))
            trans.push('#str-startup', _("Start-up Settings"))
            trans.push('#str-startup-hint', _("These settings are applied when the Tray Applet is started. Ensure the tray applet automatically starts when you login."))
            trans.push('#str-enable-startup', _("Set preferences when the tray applet starts."), True)
            trans.push('#str-start-effect', _("Start Effect:"))
            trans.push('#str-disabled', _("No Change"))
            trans.push('#str-spectrum', _("Spectrum"))
            trans.push('#str-wave', _("Wave"))
            trans.push('#str-reactive', _("Reactive"))
            trans.push('#str-breath-r', _("Breath (Random)"))
            trans.push('#str-breath-s', _("Breath (Single Color)"))
            trans.push('#str-breath-d', _("Breath (Dual Color)"))
            trans.push('#str-static', _("Static"))
            trans.push('#str-none', _("None"))
            trans.push('#str-profile-mode', _("Activate a Profile"))
            trans.push('#str-profile', _("Profile:"))
            trans.push('#str-start-bright', _("Start Brightness:"))
            trans.push('#str-auto-macro', _("Automatically enable the macro keys."), True)
            trans.push('#str-advanced', _("Advanced"))
            trans.push('#str-reset-pref', _("Reset Preferences"), True)
            trans.push('#str-reset-all', _("Reset Everything"))
            trans.push('#pref-save', _("OK"), True)

            trans.push_var('del_all_text', _("Are you sure you wish to erase all configuration and profiles?"))
            trans.push_var('no_change', _("No Change"))

            # Append version information
            if self.app_installed:
                # Hide the option to update if the app is running globally.
                self.update_page('#str-version-app-string', "html", version)
                self.update_page("#update-button", "hide")
            else:
                self.update_page('#str-version-app-string', "html", version + "-dev")

            self.update_page('#str-version-config-string', "html", str(pref.version))
            self.update_page('#str-version-lib-string', "html", str(self.devman.version))
            self.update_page('#str-version-daemon-string', "html", str(self.devman.daemon_version))

            # Populate start-up profiles list.
            self.refresh_profiles_list()

            # Set checkboxes
            for setting in ['live_switch','live_preview','activate_on_save']:
                if pref.get('editor', setting, 'true') == 'true':
                    self.update_page('#'+setting, 'prop', 'checked', 'true')

            # Fetch settings for tray/start-up settings.
            tray_icon_type = pref.get('tray_applet', 'icon_type', 'light')
            tray_icon_path = pref.get('tray_applet', 'icon_path', '')
            start_enabled = pref.get('startup', 'enabled', 'false')
            start_effect = pref.get('startup', 'start_effect', None)
            start_profile = pref.get('startup', 'start_profile', None)
            start_brightness = int(pref.get('startup', 'start_brightness', 0))
            start_macro = pref.get('startup', 'start_macro', 'false')

            # Set value for slider
            scaling = pref.get('editor', 'scaling', 1)
            self.update_page('#scaling', 'val', str(scaling))

            # Set 'values' for textboxes and dropdowns.
            self.update_page('#tray-'+tray_icon_type, 'prop', 'checked', 'true')
            self.update_page('#tray-icon-path', 'val', tray_icon_path)
            self.update_page('#tray-icon-path-preview', 'attr', 'src', tray_icon_path)
            self.update_page('#start-effect-dropdown', 'val', start_effect)
            self.update_page('#profiles-list', 'val', start_profile)
            self.update_page('#start-brightness', 'val', str(start_brightness))

            if start_macro == 'true':
                self.update_page('#start-macro', 'prop', 'checked', 'true')

            # Hide/Show UI elements
            if start_enabled == 'true':
                self.update_page('#startup-enabled', 'prop', 'checked', 'true')
                self.update_page('#startup-options', 'show')

            if start_effect == 'profile':
                self.update_page('#start-profile', 'show')
            else:
                self.update_page('#start-profile', 'hide')

            if start_brightness == 0:
                self.update_page('#start-brightness-text', 'html', _("No Change"))
            else:
                self.update_page('#start-brightness-text', 'html', str(int((start_brightness * 100) / 255 )) + '%')

            # Get default 'preferred' colours.
            self.start_p_red =   pref.get('primary_colors', 'red', 0)
            self.start_p_green = pref.get('primary_colors', 'green', 255)
            self.start_p_blue =  pref.get('primary_colors', 'blue', 0)

            self.start_s_red =   pref.get('secondary_colors', 'red', 255)
            self.start_s_green = pref.get('secondary_colors', 'green', 0)
            self.start_s_blue =  pref.get('secondary_colors', 'blue', 0)

            self.update_page('#rgb_start_primary_preview', 'css', 'background-color', 'rgba(' + str(self.start_p_red) + ',' + str(self.start_p_green) + ',' + str(self.start_p_blue) + ',1.0)')
            self.update_page('#rgb_start_secondary_preview', 'css', 'background-color', 'rgba(' + str(self.start_s_red) + ',' + str(self.start_s_green) + ',' + str(self.start_s_blue) + ',1.0)')

        elif self.current_page == 'error':
            self.update_page("#close-window", "html", _("Quit"))
            self.update_page("#restart-app", "html", _("Restart Application"))
            self.update_page("#error-icon", "attr", "src", "../img/error/" + self.error_icon + ".png")
            self.update_page("#error-title", "html", self.error_title)
            self.update_page("#error-title", "addClass", self.error_class)
            self.update_page("#error-details", "html", self.error_message)

        else:
            stdout.vvprint('No post-actions for this page.')

    """ Reloads the profile list """
    def refresh_profiles_list(self):
        stdout.vvprint('Refreshing profile list...')
        self.update_page('#app-profiles', 'html' , ' ')

        # Function to append to page.
        def append_item(uuid, data):
            css_id = "app-" + uuid
            title = data["name"]
            title = title.replace("'", '&#39;').replace('"', '&#39;')
            try:
                icon_path = data["icon"]
            except:
                icon_path = path.get_data_source(__file__) + "/img/profile-default.svg"
            if app.current_page == "menu":
                self.update_page('#app-profiles', 'append', "<div class='app-profile-item' id='{0}' onclick='profile_list_change(\"{0}\", \"{3}\", \"{2}\")'><img src='{1}'>{2}</div>".format(css_id, icon_path, title, uuid))
            elif app.current_page == "preferences":
                self.update_page('#profiles-list', 'append', "<option value='{1}'>{0}</option>".format(title, uuid))

        # Sort the profiles A-Z.
        sorted_names = {}
        for uuid in self.profiles.list_profiles():
            data = self.profiles.load_profile(str(uuid))
            try:
                human_name = data["name"]
            except:
                print("Profile UUID corrupt: " + str(uuid))
                continue
            sorted_names[human_name] = int(uuid)

        item_no = 0
        for program in sorted(sorted_names):
            uuid = sorted_names[program]
            data = self.profiles.load_profile(str(uuid))
            item_no += 1
            append_item(str(uuid), data)

    """ Process a command """
    def process_command(self, command):
        if command == 'quit':
            quit()

        ## Effects & Keyboard Controls
        elif command.startswith('brightness'):
            value = int(command[11:])
            self.active_device.brightness = value

        elif command == 'logo-toggle':
            current_status = self.active_device.fx.misc.logo
            if current_status == True:
                self.active_device.fx.misc.logo = False
            else:
                self.active_device.fx.misc.logo = True

        elif command.startswith('effect'):
            enabled_options = []
            effect = command.split('?')[1]

            if effect == 'none':
                self.current_effect = "none"
                self.active_device.fx.none()

            elif effect == 'spectrum':
                self.current_effect = "spectrum"
                self.active_device.fx.spectrum()

            elif effect == 'wave':
                self.current_effect = "wave"
                direction = int(command.split('?')[2]) # '?1' or '?2' for direction
                self.active_device.fx.wave(direction)
                enabled_options = ['waves']

            elif effect == 'reactive':
                self.current_effect = "reactive"
                self.reactive_speed = int(command.split('?')[2])
                self.active_device.fx.reactive(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue, self.reactive_speed)
                enabled_options = ['rgb_primary', 'reactive-options']

            elif effect == 'breath':
                breath_type = command.split('?')[2]
                if breath_type == 'random':
                    self.current_effect = "breath?random"
                    self.active_device.fx.breath_random()
                    enabled_options = ['breath-options']

                elif breath_type == 'single':
                    self.current_effect = "breath?single"
                    self.active_device.fx.breath_single(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                    enabled_options = ['breath-options', 'rgb_primary']

                elif breath_type == 'dual':
                    self.current_effect = "breath?dual"
                    self.active_device.fx.breath_dual(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue,
                                           self.secondary_rgb.red, self.secondary_rgb.green, self.secondary_rgb.blue)
                    enabled_options = ['breath-options', 'rgb_primary', 'rgb_secondary']

            elif effect == 'pulsate':
                self.current_effect = "pulsate"
                self.active_device.fx.pulsate(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)

            elif effect == 'ripple':
                ripple_type = command.split('?')[2]
                if ripple_type == 'single':
                    self.current_effect = "ripple?single"
                    self.active_device.fx.ripple(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                    enabled_options = ['ripple-options', 'rgb_primary']

                elif ripple_type == 'random':
                    self.current_effect = "ripple?random"
                    self.active_device.fx.ripple_random()
                    enabled_options = ['ripple-options']

            elif effect == 'static':
                self.current_effect = "static"
                self.active_device.fx.static(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                enabled_options = ['rgb_primary']

            # Fade between options for that effect, should it have been changed.
            if not self.current_effect == self.last_effect:
                # Effect changed, fade out all previous options.
                for element in ['rgb_primary', 'rgb_secondary', 'waves', 'reactive-options', 'breath-options', 'ripple-options']:
                    self.update_page('#'+element, 'fadeOut', 'fast')

                # Fade in desired options for this effect.
                for element in enabled_options:
                    self.webkit.run_javascript("setTimeout(function(){ $('#" + element + "').fadeIn('fast');}, 200)")

            self.last_effect = self.current_effect
            self.update_background_header()

        elif command == 'enable-marco-keys':
            self.active_device.macro.enable_macros()
            self.update_page('#macro-keys-enable', 'addClass', 'btn-disabled')
            self.update_page('#macro-keys-enable', 'html', "In Use")

        elif command == 'gamemode-enable':
            self.active_device.game_mode_led = True
            self.update_page('#game-mode-status', 'html', 'Enabled')
            self.update_page('#game-mode-enable', 'hide')
            self.update_page('#game-mode-disable', 'show')

        elif command == 'gamemode-disable':
            self.active_device.game_mode_led = False
            self.update_page('#game-mode-status', 'html', 'Disabled')
            self.update_page('#game-mode-enable', 'show')
            self.update_page('#game-mode-disable', 'hide')

        ## Changing colours for this session.
        elif command.startswith('ask-color'):
            element = command.split('?')[1]
            picker = Dialogues.color_picker()
            if picker == None:
                return
            else:
                picker = picker.split(',')
            command = "set-color?{0}?{1}?{2}?{3}".format(element, picker[0], picker[1], picker[2])
            self.process_command(command)

        elif command.startswith('set-color'):
            """ Expects 4 parameters separated by '?' in order: element, red, green, blue (RGB = 0-255) """
            update_effects = False
            colors = command.split('set-color?')[1]
            element = colors.split('?')[0]
            red = int(colors.split('?')[1])
            green = int(colors.split('?')[2])
            blue = int(colors.split('?')[3])
            print("Set colour of '{0}' to RGB: {1}, {2}, {3}".format(element, red, green, blue))

            self.update_page('#'+element+'_preview', 'css', 'background-color', 'rgba(' + str(red) + ',' + str(green) + ',' + str(blue) + ',1.0)')
            if app.current_page == 'profile_editor':
                self.webkit.run_javascript('set_mode("set")')

            if element == 'rgb_primary':    # Primary effect colour
                update_effects = True
                self.primary_rgb.set((red, green, blue))
                self.primary_rgb_values = [red, green, blue]

            elif element == 'rgb_secondary':   # Secondary effect colour (used for Breath mode)
                update_effects = True
                self.secondary_rgb.set((red, green, blue))
                self.secondary_rgb_values = [red, green, blue]

            elif element == 'rgb_tmp':      # Temporary colour while editing profiles.
                rgb_edit_red = red
                rgb_edit_green = green
                rgb_edit_blue = blue

            elif element == 'rgb_start_primary':  # Starting primary colour specified in Preferences.
                self.start_p_red =   red
                self.start_p_green = green
                self.start_p_blue =  blue

            elif element == 'rgb_start_secondary':  # Starting secondary colour specified in Preferences.
                self.start_s_red =   red
                self.start_s_green = green
                self.start_s_blue =  blue

            # Update static colour effects if currently in use.
            if update_effects:
                if self.current_effect == 'static':
                    self.active_device.fx.static(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                elif self.current_effect == 'breath?single':
                    self.active_device.fx.breath_single(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)
                elif self.current_effect == 'breath?dual':
                    self.active_device.fx.breath_dual(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue,
                                           self.secondary_rgb.red, self.secondary_rgb.green, self.secondary_rgb.blue)
                elif self.current_effect == 'reactive':
                    self.active_device.fx.ripple(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue, self.reactive_speed)
                elif self.current_effect == 'ripple?single':
                    self.active_device.fx.ripple(self.primary_rgb.red, self.primary_rgb.green, self.primary_rgb.blue)

            self.update_background_header()

        ## Cancel to main menu.
        ## '?xxxx' may specify changes to also make when leaving application profile editor.
        elif command.startswith('cancel-changes'):
            if command.find('?') > -1:
                command, cancel_type, cancel_args = command.split('?')
                if cancel_type == "new-profile":
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        self.profiles.remove_profile(self.profiles.selected_uuid)
                        if self.profiles.previous_uuid:
                            self.profiles.send_profile_from_file(self.active_device, self.profiles.previous_uuid)
                elif cancel_type == "edit-profile":
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        if self.profiles.previous_uuid:
                            self.profiles.send_profile_from_file(self.active_device, self.profiles.previous_uuid)

                self.update_page('#cancel', 'attr', '{onclick: \"cmd(\'cancel-changes\')\"}')
            self.show_menu('menu')

        ## Preferences
        elif command == 'pref-open':
            self.show_menu('preferences')

        elif command.startswith('web'):
            target = command.split('web?')[1]
            os.system('xdg-open "' + target + '"')

        elif command.startswith('pref-set?'):
            # pref-set ? <group> ? <setting> ? <value>
            group = command.split('?')[1]
            setting = command.split('?')[2]
            value = command.split('?')[3]
            pref.set(group, setting, value)

        elif command == 'pref-close':
            # Saves data still in memory.
            pref.set('primary_colors', 'red', self.start_p_red)
            pref.set('primary_colors', 'green', self.start_p_green)
            pref.set('primary_colors', 'blue', self.start_p_blue)

            pref.set('secondary_colors', 'red', self.start_s_red)
            pref.set('secondary_colors', 'green', self.start_s_green)
            pref.set('secondary_colors', 'blue', self.start_s_blue)

            self.show_menu('menu')

        elif command == 'pref-reset-conf':
            print('User requested to reset configuration.')
            pref.create_default_config()
            pref.load_pref()
            print('Configuration successfully reset.')
            self.show_menu('preferences')

        elif command == 'pref-reset-all':
            print('User requested to reset everything.')
            pref.clear_config()
            print('\nRestarting the application...\n')
            os.execv(__file__, sys.argv)

        ## Profile Editor / Management
        elif command.startswith('profile-edit'):
            self.profiles.selected_uuid = command.split('profile-edit?')[1].replace('%20', ' ')
            self.profiles.previous_uuid = self.profiles.selected_uuid
            self.cancel_changes = 'edit-profile'
            if self.profiles.selected_uuid is not None:
                self.show_menu('profile_editor')
            else:
                print('No profile UUID specified. Nothing to open.')

        elif command.startswith('set-key'):
            # Parse position/colour information
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])
            color = command.split('?')[3]
            red = int(color.strip('rgb()').split(',')[0])
            green = int(color.strip('rgb()').split(',')[1])
            blue = int(color.strip('rgb()').split(',')[2])
            self.profiles.memory["rows"][str(row)][col] = (red, green, blue)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('clear-key'):
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])
            self.profiles.memory["rows"][str(row)][col] = (0, 0, 0)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-activate'):
            command = command.replace('%20',' ')
            uuid = command.split('profile-activate?')[1]
            self.webkit.run_javascript('set_cursor("html","wait")')
            self.profiles.send_profile_from_file(self.active_device, uuid)
            self.update_page('#custom', 'html', 'Profile - ' + uuid)
            self.update_page('#custom', 'prop', 'checked', 'true')
            self.webkit.run_javascript('set_cursor("html","normal")')
            self.current_effect = 'custom'
            self.update_background_header()

        elif command == 'profile-preview':
            self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-del'):
            uuid = command.split('?')[1]
            self.profiles.remove_profile(uuid)
            self.refresh_profiles_list()
            restart_tray_applet()

        elif command.startswith('profile-new'):
            profile_name = command.split(';')[1].replace('%20', ' ')
            profile_icon = command.split(';')[2].replace('%20', ' ')
            self.profiles.previous_uuid = self.profiles.selected_uuid
            uuid = self.profiles.new_profile()
            self.profiles.selected_uuid = uuid
            self.cancel_changes = 'new-profile'
            self.profiles.set_metadata(uuid, "name", profile_name)
            if os.path.exists(profile_icon):
                self.profiles.set_metadata(uuid, "icon", profile_icon)
            else:
                profile_icon = pref.path.get_data_source(__file__) + "/img/profile-default.svg"
                self.profiles.set_metadata(uuid, "icon", profile_icon)
            self.show_menu('profile_editor')
            restart_tray_applet()

        elif command.startswith('profile-set-metadata'):
            new_name = command.split(';')[1].replace('%20', ' ')
            new_icon = command.split(';')[2].replace('%20', ' ')

            # Determine if icon really exists and fallback if not.
            if os.path.exists(new_icon):
                self.profiles.memory["icon"] = new_icon
            else:
                new_icon = pref.path.get_data_source(__file__) + "/img/profile-default.svg"

            # New values are saved to profile stored in memory.
            self.profiles.memory["name"] = new_name
            self.profiles.memory["icon"] = new_icon

        elif command == 'profile-save':
            uuid = self.profiles.selected_uuid
            print("Saving profile UUID: " + str(uuid))
            self.profiles.save_profile_from_memory(uuid)
            self.show_menu('menu')

            if pref.get('editor', 'activate_on_save', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-rename'):
            uuid = command.split('?')[1]
            uuid_css = 'app-' + uuid

            data = self.profiles.memory
            name = data["name"]
            icon = data["icon"]

            app.update_page('#dialog-rename-name', 'val', name)
            app.update_page('#dialog-rename-icon', 'val', icon)
            app.update_page('#dialog-rename-name-preview', 'html', name)
            app.update_page('#dialog-rename-icon-preview', 'attr', 'src', icon)
            app.webkit.run_javascript("rename_profile_dialog_open()")

        ## List application launchers to create profiles for.
        elif command == 'fetch-app-launchers':
            unknown_icon_path = pref.path.get_data_source(__file__) + "/img/generic-application.svg"

            # Functions for this feature.
            def append_item(uid, name, icon_path):
                css_id = "launcher-" + uid
                if not os.path.exists(icon_path):
                    icon_path = unknown_icon_path
                self.update_page('#app-launchers', 'append', "<div class='app-launcher-item' id='{0}' onclick='prefill_launcher(\"{0}\", \"{1}\", \"{2}\")'><img src='{2}'>{1}</div>".format(uid, name, icon_path))

            def read_launcher(path):
                contents = ''
                with open(path) as stream:
                    contents = stream.readlines()
                return contents

            def read_line(data, item):
                for line in data:
                    if line.startswith(item):
                        findings = line.split(item)[1].replace('\n','')
                        return findings
                return 'null'

            # Clear the list, if previously opened.
            self.update_page('#app-launchers', 'html', ' ')
            unique_id = 0

            # Gather a list of launchers from A-Z.
            system_apps = '/usr/share/applications/*.desktop'
            user_apps = os.path.join(os.path.expanduser('~'), '.local', 'share', 'applications/')

            if os.path.isdir(user_apps):
                user_launchers = glob.glob(user_apps + '*.desktop')
                user_launchers.sort()
            else:
                user_launchers = []

            sys_launchers = glob.glob(system_apps)
            sys_launchers.sort()

            launchers = []
            launchers.extend(user_launchers)
            launchers.extend(sys_launchers)

            for path in launchers:
                unique_id += 1
                try:
                    contents = read_launcher(path)
                    app_name = read_line(contents, 'Name=')
                    app_icon = read_line(contents, 'Icon=')
                except:
                    # Skip any invalid launchers.
                    continue

                if os.path.exists(app_icon):
                    # Icon is already an abs. path.
                    icon_path = app_icon
                else:
                    # Use GTK to determine theme icon.
                    try:
                        icon_path = icon_name_to_path(app_icon)
                        if not os.path.exists(icon_path):
                            # Icon path couldn't be determined.
                            icon_path = unknown_icon_path
                    except:
                        icon_path = unknown_icon_path

                append_item(str(unique_id), app_name, icon_path)

        ## Open the file browser and return a successful path to that div.
        elif command.startswith("browse-file-icon"):
            div_id = command.split('?')[1]
            path = Dialogues.file_picker(_("Choose Application Profile Icon"), 'image')
            if path != None:
                app.update_page('#'+div_id, 'val', path)
                app.update_page('#'+div_id+'-preview', 'attr', 'src', path)
            else:
                return

        ## Miscellaneous
        elif command == 'open-config-folder':
            os.system('xdg-open "' + pref.path.root + '"')

        elif command == 'restart-tray':
            restart_tray_applet()

        elif command == 'reset-app':
            os.execv(__file__, sys.argv)

        elif command == 'update-check':
            update_script = os.path.join(pref.Paths.get_data_source(__file__) + "/../install/update.sh")
            background_process('x-terminal-emulator -e "{0}"'.format(update_script), shell=True)

        ## Multi Device Support
        elif command.startswith('device-select?'):
            selected_serial = command.split('?')[1]
            selected_device = None
            # Loop through each device object until we find the device.
            for device in self.devices:
                if device.serial == selected_serial:
                    selected_device = device

            if selected_device:
                self.active_device = selected_device
                self.active_ui_device = selected_device.serial
                formfactor = selected_device.type
            else:
                print("Could not locate device with serial: " + selected_serial)
                return

            app.update_page(".device", "removeClass", "active")
            app.update_page("#" + selected_serial, "addClass", "active")
            stdout.vprint("Selected: {0} [{1}]".format(selected_device.name, selected_serial))

            # Change the header image
            self.update_device_supported_features()

        elif command == 'device-refresh':
            stdout.vprint("Refreshing device list...")
            self.devices = self.get_devices()
            self.refresh_device_list()
            if len(self.devices) == 0:
                self.active_device = None
            else:
                self.active_device = self.devices[0]
            self.update_device_supported_features()

            for device in self.devices:
                stdout.vprint("Found: {0} [{1}]".format(device.name, device.serial))

        else:
            print("Unimplemented command: " + command)

    """ Refresh device list """
    def get_devices(self):
        found_devices = []
        for device in self.devman.devices:
            found_devices.append(device)

        # Show an error if no devices were returned by the daemon.
        if len(found_devices) == 0:
            self.show_error_page(
                "warning", "nodevice", _("No Devices Found"),
                _("Please check your Razer device is connected and that the daemon supports your device, then try again.") +
                '<br><br><a onclick="cmd(\'web?https://github.com/terrycain/razer-drivers#device-support\')>"' + _("Check Device Support") + '</a>')

        return(found_devices)

    def refresh_device_list(self):
        try:
            selected = self.active_device.serial
        except:
            # No device was present before.
            selected = "0"
        selected_ui = self.active_ui_device
        if self.current_page == "menu":
            app.update_page(".device", "remove")
            for device in self.devices:
                name = str(device.name)
                formfactor = str(device.type)
                if formfactor == "firefly":
                    formfactor = "mousemat"
                serial = str(device.serial)
                state = "normal"
                htmlbuffer = "<a id='{0}' class='device' onclick='cmd(\"device-select?{0}\")'><div><img src='../img/states/{1}/{2}.svg'> <span>{3}</span></div></a>".format(serial, state, formfactor, name)
                app.update_page("#device-tabs", "append", htmlbuffer)
        app.update_page('#' + selected_ui, "addClass", "active")

    def update_device_supported_features(self):
        # Reset all elements
        elements =  ["str-effects", "fx-none", "fx-spectrum", "fx-wave", "fx-reactive", "fx-breath", "fx-pulsate", "fx-ripple", "fx-static", "brightness-slider", "logo-toggle",
                     "rgb_primary", "rgb_secondary", "waves", "reactive-options", "breath-options", "ripple-options"
                     "fx-breath-random", "fx-breath-single", "fx-breath-dual", "fx-ripple-single", "fx-ripple-random"
                    ]
        for element in elements:
            self.update_page("#"+element, "hide", "fast")

        # Hide features not supported by this type of device
        device_name = str(self.active_device.name)
        device_type = self.active_device.type
        if device_type == "keyboard":
            self.update_page(".keyboard-only", "fadeIn", "fast")
        else:
            self.update_page(".keyboard-only", "fadeOut", "fast")
        self.update_background_header()

        # Hide options according to the daemon.
        def check_ability(capability, ui_element):
            supported = self.active_device.has(capability)
            if supported:
                self.update_page("#"+ui_element, "show", "fast")

        # Effects List
        check_ability("lighting_none", "fx-none")
        check_ability("lighting_static", "fx-static")
        check_ability("lighting_static", "str-effects")
        check_ability("lighting_spectrum", "fx-spectrum")
        check_ability("lighting_wave", "fx-wave")
        check_ability("lighting_reactive", "fx-reactive")
        check_ability("lighting_breath_single", "fx-breath")
        check_ability("lighting_ripple", "fx-ripple")
        check_ability("lighting_pulsate", "fx-pulsate")

        # Effect Options
        check_ability("lighting_breath_random", "fx-breath-random")
        check_ability("lighting_breath_single", "fx-breath-single")
        check_ability("lighting_breath_dual", "fx-breath-dual")
        check_ability("lighting_ripple", "fx-ripple-single")
        check_ability("lighting_ripple_random", "fx-ripple-random")

        # Brightness
        check_ability("brightness", "brightness-slider")

        # Logo light toggle - but exclude Mamba.
        if str(device_name).find("Mamba") == -1:
            check_ability("lighting_logo", "logo-toggle")

    def update_background_header(self):
        if not self.current_page == "menu":
            return

        device_type = self.active_device.type
        if device_type == "firefly":
            device_type = "mousemat"

        if self.current_effect == "spectrum":
            app.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, "spectrum"))
        elif self.current_effect == "wave":
            app.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, "wave"))
        else:
            rgba = "rgba({0},{1},{2},1)".format(str(self.primary_rgb_values[0]), str(self.primary_rgb_values[1]), str(self.primary_rgb_values[2]))
            app.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, rgba))

    """ When things go horribly wrong. """
    def show_error_page(self, severity, icon, title, message):
        # severity  =   'normal', 'warning', 'serious'
        # icon      =   Filename as seen in ../img/error/
        # title / message = Strings to display.
        self.error_title = title
        self.error_icon = icon
        self.error_message = message
        self.error_class = severity
        self.show_menu("error")


class Dialogues(object):
    def fatal_error(message, do_quit=False):
        dialog = Gtk.MessageDialog(type = Gtk.MessageType.ERROR, buttons = Gtk.ButtonsType.OK)
        dialog.set_title("Polychromatic Controller")
        dialog.set_markup(message)
        dialog.run()
        dialog.destroy()
        if do_quit:
            sys.exit()

    def color_picker():
        # TODO: Ability to track and set last colour in GTK dialog.
        colorseldlg = Gtk.ColorSelectionDialog(_("Choose a Color"))
        colorsel = colorseldlg.get_color_selection()

        if colorseldlg.run() == Gtk.ResponseType.OK:
            color = colorsel.get_current_color()
            red = int(color.red / 256)
            green = int(color.green / 256)
            blue = int(color.blue / 256)
            colorseldlg.destroy()
            return "{0},{1},{2}".format(str(red),str(green),str(blue))
        else:
            colorseldlg.destroy()
            return None

    def file_picker(help_text, filter_mode):
        #   help_text   =   String displayed in dialog title.
        #   filters     =   Predefined filters (e.g. 'image')

        win = Gtk.Window(title=_("Polychromatic Controller"))
        dialog = Gtk.FileChooserDialog(help_text, app.window, Gtk.FileChooserAction.OPEN, \
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
                                      )
        # Setup filters
        if filter_mode == 'image':
            a = Gtk.FileFilter()
            a.set_name(_("All Images"))
            a.add_mime_type("image/jpeg")
            a.add_mime_type("image/png")
            a.add_mime_type("image/gif")
            a.add_mime_type("image/svg+xml")
            dialog.add_filter(a)

            j = Gtk.FileFilter()
            j.set_name("JPEG " + _("Image"))
            j.add_mime_type("image/jpeg")
            dialog.add_filter(j)

            p = Gtk.FileFilter()
            p.set_name("PNG " + _("Image"))
            p.add_mime_type("image/png")
            dialog.add_filter(p)

            g = Gtk.FileFilter()
            g.set_name("GIF " + _("Image"))
            g.add_mime_type("image/gif")
            dialog.add_filter(g)

            s = Gtk.FileFilter()
            s.set_name("SVG " + _("Image"))
            s.add_mime_type("image/svg+xml")
            dialog.add_filter(s)

        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            path = dialog.get_filename()
            dialog.destroy()
            return path
        else:
            dialog.destroy()
            return None


class Terminal(object):
    """ Process arguments passed via the terminal. """
    def __init__(self):
        self.be_verbose = False
        self.be_very_verbose = False

        for arg in sys.argv[1:]:
            if arg == '--help' or arg == '-h':
                self.show_help()

            elif arg == '--verbose' or arg == '-v':
                self.be_verbose = True
                self.vprint('Verbose enabled.')

            elif arg == '-vv' or arg == '--debug':
                self.be_verbose = True
                self.be_very_verbose = True
                self.vvprint('Debug verbose enabled.')

            else:
                print('Ignoring unrecognised parameters:' + arg)

    def show_help(self):
      print('\nPolychromatic Controller Arguments\n')
      print('\nUsage: polychromatic-controller [arguments]')
      #     | Command                      | Help Text                                     |
      print('  -h, --help                   Show this help text.')
      print('  -v, --verbose                Be verbose to stdout.')
      print('  -vv, --debug                 Be very verbose. For debugging only.')
      print('')
      exit()

    def vprint(self, text):
        if self.be_verbose:
            print(text)

    def vvprint(self, text):
        if self.be_very_verbose:
            print(text)


""" Shared function to get an image path using Gtk """
def icon_name_to_path(icon_name):
    theme = Gtk.IconTheme.get_default()
    info = theme.lookup_icon(icon_name, 22, 0)
    path = info.get_filename()
    if path:
        return path
    else:
        return 'null'

""" For restarting the tray applet (only when running) """
tray_pid_file = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet.pid")

def restart_tray_applet():
    print("Tray applet restarting...")
    # Get the PID written in memory.
    try:
        with open(tray_pid_file) as stream:
            tray_pid = int(stream.readline())
        print(tray_pid)
    except IOError:
        print("Tray applet is not running.")
        return

    # Where is the tray applet?
    if __file__.startswith("/usr"):
        tray_bin_path = "/usr/bin/polychromatic-tray-applet"
    else:
        tray_bin_path = os.path.join(path.get_data_source(__file__) + "/../polychromatic-tray-applet")

    # Attempt to gracefully stop the process, then launch again.
    try:
        os.kill(tray_pid, 15)
        background_process(tray_bin_path)
    except OSError:
        print("Tray applet is not running or couldn't be relaunched.")
        return
    print("Tray Applet Reloaded.")


if __name__ == "__main__":
    data_source = path.get_data_source(__file__)
    trans = Translations()
    stdout = Terminal()
    app = Controller()
    app.run_app()
