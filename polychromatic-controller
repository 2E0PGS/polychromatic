#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2018 Luke Horwell <code@horwell.me>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

"""
Main application for Polychromatic, a GUI for interfacing with the OpenRazer daemon
and Polychromatic's command line functions.

Requires openrazer-daemon to be installed.
"""

import os
import sys
import glob
import signal
import gettext
import time
import threading
import argparse
from setproctitle import setproctitle
from subprocess import Popen as background_process
from subprocess import check_output
from platform import linux_distribution

try:
    import openrazer.client as rclient
    from openrazer_daemon.keyboard import get_keyboard_layout
    from openrazer_daemon.keyboard import RGB
    daemon_missing = False
except ImportError as e:
    # We'll show a graphical error when loading up.
    print("Failed to import modules for daemon.")
    print("Exception: " + str(e))
    daemon_missing = True

try:
    # Relative copy
    import pylib.preferences as pref
    import pylib.profiles as prof
    import pylib.common as common
    import pylib.screens as Screens
    relative = True
except ImportError:
    # Installed to system
    import polychromatic.preferences as pref
    import polychromatic.profiles as prof
    import polychromatic.common as common
    import polychromatic.screens as Screens
    relative = False
except Exception as e:
    print("One or more of Polychromatic's modules could not be imported!")
    print("Try re-installing the application.")
    print("\nException:" + str(e))
    exit(1)

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
gi.require_version("WebKit2", "4.0")
from gi.repository import GLib, Gtk, Gdk, WebKit2

setproctitle("polychromatic-controller")
version = "1.0.0-alpha"
version_dev = False

# For when fatal errors occur.
deadlock = False

path = pref.Paths()
path.data_source = path.get_data_source(__file__)
daemon_config_path = os.path.join(os.path.expanduser("~"), ".local/share/openrazer/razer.conf")

# Imported on-demand:
#   * requests
#   * configparser
#   * shutil
#   * grp

# Is this application installed in /usr/share or ran from repository?
if relative:
    version_dev = True
    version = version + "-dev"

    # Does the LESS exist? If not, try to compile it.
    # For development, it's important the latest CSS is used.
    css_path = os.path.join(path.data_source + "/pages/controller.css")
    css_compile_cmd = "lessc source/data/controller.less data/pages/controller.css"
    dbg = common.Debugging()
    import shutil

    if shutil.which("lessc") == None:
        dbg.stdout("Please install 'lessc' and run the application again.", dbg.warning)
        exit(1)
    else:
        dbg.stdout("Compiling LESS...", dbg.action, 1)
        os.system(css_compile_cmd)
        if os.path.exists(css_path):
            dbg.stdout("Successfully compiled LESS.", dbg.success)
        else:
            dbg.stdout("Failed to compile LESS file! Please install 'lessc' and run:", dbg.error)
            dbg.stdout(css_compile_cmd)
            exit(1)

else:
    version_dev = False
    version = version + "-stable"


class AppView(WebKit2.WebView):
    def __init__(self):
        """
        Initialise WebKit2
        """
        # Create WebKit Container
        webkit = WebKit2
        webkit.WebView.__init__(self)
        self.set_background_color(Gdk.RGBA(0, 0, 0, 1))

        # Post-actions after pages fully load.
        self.connect("load-changed", self.load_changed_cb)
        self.connect("notify::title", self.title_changed_cb)
        self.connect("context-menu", self.context_menu_cb)
        dbg.stdout("WebView Initialised.", dbg.success, 2)

        try:
            # Allows local SVG files to load.
            self.get_settings().set_allow_file_access_from_file_urls(True)
            try:
                self.get_settings().set_allow_universal_access_from_file_urls(True)
            except AttributeError:
                dbg.stdout("Ignoring set_allow_universal_access_from_file_urls because the WebKit2GTK version is <2.14.", dbg.warning, 1)

            # Print console log errors to stdout if verbose
            if dbg.verbose_level >= 1:
                self.get_settings().set_enable_write_console_messages_to_stdout(True)

            # Basic accessibility - keyboard navigation
            self.get_settings().set_enable_spatial_navigation(True)
            self.get_settings().set_enable_caret_browsing(True)

        except AttributeError as e:
            dbg.stdout("WebKit2GTK failed to initialise!", dbg.error)
            print("Your distribution may be using an older version of this library.")
            print("For example, Debian/Ubuntu provides this in 'gir1.2-webkit-4.0'\n")
            dbg.stdout("The exception was: {0}\n".format(str(e)), dbg.error)
            exit(1)

        # Enable web inspector for debugging
        if dbg.verbose_level == 3:
            self.get_settings().set_property("enable-developer-extras", True)
            inspector = self.get_inspector()
            inspector.show()

        # Load the starting page
        self.load_uri("file://" + os.path.join(path.data_source, "pages/controller.html"))

    def run_js(self, function):
        """
        Runs a JavaScript function on the page, regardless of which thread it is called from.
        GTK+ operations must be performed on the same thread to prevent crashes.
        """
        GLib.idle_add(self._run_js, function)

    def _run_js(self, function):
        """
        Private function for running a JavaScript function on the page when invoked from run_js()
        """
        self.run_javascript(function)
        return GLib.SOURCE_REMOVE

    def title_changed_cb(self, view, frame):
        """
        Callback: Title changed

        This is where the frontend has set document.title, which is used for
        communicating to Python via commands.
        """
        title = self.get_title()
        if title not in ["null", None, "", " "]:
            app.process_command(title)

    def context_menu_cb(self, view, menu, event, htr, user_data=None):
        """
        Callback: Disables the context menu.
        """
        return True

    def load_changed_cb(self, view, frame):
        """
        Callback: Page changed

        Intended to be called when the initial controller.html page has finished loading.
        """
        if not self.is_loading():
            dbg.stdout("WebView Ready.", dbg.success, 2)
            thread = threading.Thread(target=app.start_loading, args=([view]))
            thread.daemon = True
            thread.start()


class AppWindow(object):
    def run(self):
        """
        Assembles and begins running the application.
        """
        # Initalise WebKit
        self.webkit = AppView()

        # Create window
        self.window = Gtk.Window(title=_("Polychromatic Controller"))
        self.window.set_wmclass("polychromatic-controller", "polychromatic-controller")
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.modify_bg(Gtk.StateType(0), Gdk.Color(0, 0, 0))
        self.window.set_size_request(1000, 600)

        try:
            self.window.set_icon_from_file(os.path.join(path.data_source, "../install/hicolor/16x16/apps/polychromatic-controller.svg"))
            dbg.stdout("Window icon set from relative path.", dbg.debug, 2)
        except:
            self.window.set_icon_from_file("/usr/share/icons/hicolor/16x16/apps/polychromatic-controller.svg")
            dbg.stdout("Window icon set from /usr/share/ path.", dbg.debug, 2)

        # Add elements to window
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Scale the application for HIDPI displays and DEs that don't handle this automatically.
        scale2x = float(pref.get("editor", "scale2x", False))
        if scale2x == True:
            self.webkit.set_zoom_level(1.5)
            self.window.set_size_request(1500, 900)
            dbg.stdout("HIDPI compatibility enabled", dbg.action, 1)

        # Build an auto expanding box and add the scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)
        self.window.add(b)
        self.window.connect("delete-event", Gtk.main_quit)
        self.window.show_all()
        dbg.stdout("Window Initialised", dbg.success, 1)

        # Kills process when CTRL+C'd.
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()


class Controller(object):
    def __init__(self):
        """
        Initialises variables throughout the application.
        """
        # Variables are assigned later in start_loading()
        self.webkit = None
        self.devman = None
        self.devices = []
        self.screen = None
        self.screen_id = "unknown"
        self.version = version
        self.show_fatal_error = show_fatal_error

        self.screens = {
            "mainscreen": Screens.main.MainScreen,
            "loading": Screens.loading.Loading,
            "error": Screens.error.Error
        }

    def change_screen(self, new_screen_id, params=[]):
        """
        Sets a new screen in the user interface.
        """
        if self.screen:
            dbg.stdout("Leaving screen: " + self.screen_id, dbg.action, 1)
            self.screen.close_screen(new_screen_id)

        dbg.stdout("Entering screen: " + new_screen_id, dbg.action, 1)
        ui = UIControls()
        self.screen = self.screens[new_screen_id](self, ui, pref, path, dbg)
        self.screen_id = new_screen_id
        if len(params) == 0:
            self.screen.open_screen()
        else:
            dbg.stdout("Screen parameters: " + str(params), dbg.debug, 2)
            self.screen.open_screen(params)

    def run_javascript(self, function):
        """
        Sends a JavaScript function to the page.
        """
        self.webkit.run_js(function)

    def update_page(self, element, function, parm1=None, parm2=None):
        """
        Sends a jQuery function to the page, ensuring correctly parsed quotes.
        """
        if parm1 and parm2:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "', '" + parm2.replace("'", '\\\'') + "')"
            dbg.stdout(' => ' + buffer, dbg.debug, 2)
            self.run_javascript(buffer)
        if parm1:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "')"
            dbg.stdout(' => ' + buffer, dbg.debug, 2)
            self.run_javascript(buffer)
        else:
            buffer = '$("' + element + '").' + function + '()'
            dbg.stdout(' => ' + buffer, dbg.debug, 2)
            self.run_javascript(buffer)

    def process_command(self, cmd):
        """
        Process a command issued from the frontend for the page
        """
        if cmd == "null":
            return

        dbg.stdout("=> Command: " + str(cmd), dbg.debug, 2)

        # Global commands
        if cmd == "quit":
            """
            Close the application.
            """
            exit()

        elif cmd == "restart-daemon":
            """
            Restarts the OpenRazer daemon.
            """
            restart_daemon_service()

        elif cmd == "reload":
            """
            Restarts the application.
            """
            os.execv(__file__, sys.argv)

        elif cmd.startswith("run?"):
            """
            Runs a program (or command) to run in the background.

            Expects:    ?<program>
            """
            background_process(cmd.split("run?")[1], shell=True)

        elif cmd.startswith("open?"):
            """
            Opens a file/folder/protocol using the default application.

            Expects:    ?<path>
            """
            os.system("xdg-open '{0}'".format(cmd.split("open?")[1]))

        elif cmd.startswith("browse?"):
            """
            Opens the Browse dialogue and sets the path to a textbox.

            Expects:    ?<browse_id>?<target element id>
            """
            cmd = cmd.split("?")
            browse_id = int(cmd[1])
            target_element = cmd[2]

            dbg.stdout("Opening file picker: " + str(browse_id), dbg.action, 1)
            picker = Dialogues.file_picker(browse_id)
            if picker != None:
                dbg.stdout("Picked file: " + picker, dbg.success, 1)
                self.update_page("#" + target_element, "val", picker)
            else:
                dbg.stdout("File browser was closed without picking a file", dbg.warning, 1)
                return

        # Special
        elif cmd == "pref-reset-all":
            """
            Completely nukes data stored by Polychromatic.
            """
            dbg.stdout("Destroying: ~/.config/polychromatic ...", dbg.action)
            pref.clear_config()
            dbg.stdout("Application will restart.", dbg.action)
            os.execv(__file__, sys.argv)

        # Colours
        elif cmd.startswith("colour-pick?"):
            """
            Opens the colour picker to choose a colour for an element.

            Expects:    ?<element id>?
            """
            cmd = cmd.split("?")
            element_id = "#" + cmd[1] + "-preview"
            dbg.stdout("Opening colour picker", dbg.action, 1)
            picker = Dialogues.color_picker()

            if picker:
                dbg.stdout("Selected colour RGB " + picker, dbg.success, 1)
                self.update_page(element_id, "css", "background-color", "rgb({0})".format(picker))
            else:
                dbg.stdout("Cancelled colour picker dialogue window.", dbg.action, 1)

        # Commands specific to current page
        else:
            if not self.screen.process_command(cmd):
                dbg.stdout("Unimplemented or missing command: " + cmd, dbg.error)

        # WebKit2 quirk - clear "title" so same command can execute again
        self.run_javascript("cmd('null')");

    def start_loading(self, webkit):
        """
        Function that triggers the main application's operations.
        """
        self.webkit = webkit
        dbg.stdout("Version " + version, dbg.debug, 1)
        self.change_screen("loading")

        dbg.stdout("Connecting to OpenRazer Daemon...", dbg.action, 1)

        if daemon_missing:
            show_fatal_error(100)
            return

        try:
            self.devman = rclient.DeviceManager()
        except rclient.DaemonNotFound:
            self.devman = None
            error_code = 101
        except Exception as e:
            self.devman = None
            error_code = 102
            show_fatal_error(error_code, str(e))

        # When the running daemon and installed library differ, request the user to restart the daemon.
        # Running   = Current running daemon's version.
        # Installed = Version installed globally on system.
        try:
            running_version = self.devman._daemon_version
            import openrazer_daemon.daemon
            installed_version = openrazer_daemon.daemon.__version__
        except Exception:
            # Daemon may have crashed, skip this check.
            running_version = 0
            installed_version = 0

        # Require restart if daemon is outdated.
        if running_version < installed_version and not version_dev:
            show_fatal_error(103)
            return

        # Display an upgrade message if using the old daemon.
        if os.path.exists("/usr/lib/python3/dist-packages/razer/inteface/keyboard.py") or os.path.exists(os.path.join(sys.path[-1], "/razer/inteface/keyboard.py")):
            show_fatal_error(104)
            return

        # Display an error message if the daemon is having problems on the system.
        if not self.devman:
            # Check the user is in the 'plugdev' group
            import grp
            if not "plugdev" in [grp.getgrgid(g).gr_name for g in os.getgroups()]:
                show_fatal_error(105)
                return

            show_fatal_error(error_code)
            return

        self.devices = self.devman.devices

        # Turn off incompatible features
        self.devman.sync_effects = False

        # Initialise Profiles
        dbg.stdout("Loading application profiles...", dbg.action, 1)
        self.profiles = prof.AppProfiles()
        self.profiles.selected_uuid = None
        self.profiles.previous_uuid = None

        # Set active device.
        if len(self.devices) == 0:
            self.active_device = None
            self.active_device_serial = None
            return
        else:
            self.active_device = self.devices[0]
            self.active_device_serial = self.devices[0].serial

        # Start watching devicestate index for changes.
        common.devicestate_monitor_start(self.device_state_changed, path.devicestate)

        dbg.stdout("Application Ready.", dbg.success, 2)
        self.change_screen("mainscreen", [0, 0])


class UIControls():
    @staticmethod
    def print_button(label, uid, cmd, icon=None, disabled=False, css_override=None, cmd_is_js=False):
        if icon != None:
            if icon.startswith("fa-"):
                icon_div = '<span class="fa {0}"></span> '.format(icon)
            else:
                icon_div = '<img src="img/{0}" /> '.format(icon)
        else:
            icon_div = ""

        if disabled:
            disabled_class = "disabled"
        else:
            disabled_class = ""

        if cmd_is_js:
            onclick = cmd.replace("'", "\'")
        else:
            onclick = "cmd(\'{0}\')".format(cmd)

        return '<button id="{0}" class="btn {4} {5}" onclick="{1}">{2}{3}</button>'.format(
            uid, onclick, icon_div, label, disabled_class, css_override)

    @staticmethod
    def print_link(label, url):
        return '<button class="link" onclick="cmd(\'open?{0}\')">{1}</button>'.format(url, label)

    @staticmethod
    def print_control_category(label):
        return '<h3>{0}</h3>'.format(label)

    @staticmethod
    def print_checkbox(label, uid, pref_group, pref_item, disabled=False, help_text=None):
        if disabled:
            disabled_class = "disabled"
        else:
            disabled_class = ""

        cmd = "pref-toggle?{0}?{1}".format(pref_group, pref_item)

        if pref.get(pref_group, pref_item, False):
            checked_class = "checked"
        else:
            checked_class = ""

        if help_text:
            help_text = UIControls._get_helptext_html(help_text)
        else:
            help_text = ''

        return '<label class="pref-label {1}"><input type="checkbox" id="{0}" onclick="cmd(\'{3}\')" class="{1}" {4}/> {2}</label> {5}<br/>'.format(
            uid, disabled_class, label, cmd, checked_class, help_text)

    @staticmethod
    def print_radio(label, uid, pref_group, pref_item, pref_value, disabled=False, help_text=None, additional_cmds=None):
        if disabled:
            disabled_class = "disabled"
        else:
            disabled_class = ""

        if pref.get(pref_group, pref_item, "") == pref_value:
            checked_class = "checked"
        else:
            checked_class = ""

        if help_text:
            help_text = UIControls._get_helptext_html(help_text)
        else:
            help_text = ""

        if not additional_cmds:
            additional_cmds = ""

        cmd = "pref-set?{0}?{1}?{2}".format(pref_group, pref_item, pref_value)

        return '<label class="pref-label {1}"><input type="radio" name="{5}" id="{0}" onclick="cmd(\'{3}\'); {6}" class="{1}" {4}/> {2}</label> {7}<br/>'.format(
            uid, disabled_class, label, cmd, checked_class, pref_group, additional_cmds, help_text)

    @staticmethod
    def print_about_label(label, value):
        return '<label class="about-label">{0} <code>{1}</code></label>'.format(
            label, value)

    @staticmethod
    def print_slider(label, uid, min_value, max_value, step_value, start_value, pref_group, pref_item, disabled=False, help_text=None):
        if disabled:
            disabled_class = "disabled"
        else:
            disabled_class = ""

    @staticmethod
    def print_invalid_label(element_id, label):
        return "<label id='{0}' class='invalid' style='display:none'><span class='fa fa-warning'></span> {1}</label>".format(element_id, label)

        if help_text:
            help_text = UIControls._get_helptext_html(help_text)
        else:
            help_text = ''

        cmd = "cmd('pref-set?editor?scaling?' + $(this).val())"
        return '<label class="pref-label {7}">{6} <input class="{7}" type="range" id="{0}" onmouseout="{1}" min="{2}" max="{3}" value="{4}" step="{5}"/></label>'.format(
            uid, cmd, min_value, max_value, start_value, step_value, label, disabled_class)

    @staticmethod
    def _get_helptext_html(text):
        return '<label class="pref-help">{0}</label>'.format(text)

    @staticmethod
    def run_post_js(cmds):
        return '<script>{0}</script>'.format(cmds)

    @staticmethod
    def print_page_break():
        return '<br><br>'

    @staticmethod
    def append_tab(tab_id, icon_path, string, extra_class=""):
        return '<button id="tab-{0}" class="tab {3}" onclick="switchTab(\'#tab-{0}\')"><img src="../img/{1}"/><span>{2}</span></button>'.format(
            tab_id, icon_path, string, extra_class)

    @staticmethod
    def print_loading_text(element_id, message):
        return '<div id="{0}" class="loading-text" hidden>{1}</div>'.format(element_id, message)

    class JavaScript():
        def generate_confirmation_dialog(update_page, title, message, ok_label, ok_cmd=None, cancel_label=None, cancel_cmd=None, style_class="", width=None, height=None):
            dialog_uuid = "dialog-" + pref.generate_uuid()
            html = '<div id="{0}" class="dialog {5}" style="width:{3}; height:{4}" hidden>' \
                    '<h3>{1}</h3>' \
                    '<p>{2}</p>' \
                    '<div class="dialog-buttons">' \
                    '<hr>'.format(
                        dialog_uuid, title, message, width, height, style_class)

            if cancel_label:
                cancel_onclick = "dialog_close('" + dialog_uuid + "')"
                if cancel_cmd:
                    cancel_onclick += "; " + cancel_cmd

                html += '<button class="btn" onclick="{1}">{0}</button>'.format(
                    cancel_label,
                    cancel_onclick)

            html += '<button class="btn primary" onclick="{0}; {1}">{2}</button>'.format(
                "dialog_close('" + dialog_uuid + "');",
                ok_cmd if ok_cmd else "",
                ok_label)

            html += '</div></div>'
            update_page("body", "append", html)
            return dialog_uuid

        def generate_alert_dialog(update_page, title, message, ok_label, ok_cmd=None, style_class="", width=None, height=None):
            dialog_uuid = "dialog-" + pref.generate_uuid()
            html = '<div id="{0}" class="dialog {5}" style="width:{3}; height:{4}" hidden>' \
                    '<h3>{1}</h3>' \
                    '<p>{2}</p>' \
                    '<div class="dialog-buttons">' \
                    '<hr>'.format(
                        dialog_uuid, title, message, width, height, style_class)

            html += '<button class="btn primary" onclick="{0}; {1}">{2}</button>'.format(
                "dialog_close('" + dialog_uuid + "');",
                ok_cmd if ok_cmd else "",
                ok_label)

            html += '</div></div>'
            update_page("body", "append", html)
            return dialog_uuid

    @staticmethod
    def print_tab(tab_number, icon_path, string, extra_class=""):
        return '<button id="tab-{0}" class="tab {3}" onclick="cmd(\'switch-tab?{0}\')"><img src="../img/{1}"/><span>{2}</span></button>'.format(
            str(tab_number), icon_path, string, extra_class)

    @staticmethod
    def print_sidebar_item(subpage_number, icon_path, string, extra_class=""):
        return '<button id="sidebar-item-{0}" class="sidebar-item {3}" onclick="cmd(\'switch-sidebar?{0}\')"><img src="../img/{1}"/><span>{2}</span></button>'.format(
            str(subpage_number), icon_path, string, extra_class)


class Dialogues():
    def fatal_error(message, do_quit=False):
        dialog = Gtk.MessageDialog(type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK)
        dialog.set_title("Polychromatic Controller")
        dialog.set_markup(message)
        dialog.run()
        dialog.destroy()
        if do_quit:
            sys.exit()

    def color_picker():
        # TODO: Ability to track and set last colour in GTK dialog.
        colorseldlg = Gtk.ColorSelectionDialog(_("Choose a Color"))
        colorsel = colorseldlg.get_color_selection()

        if colorseldlg.run() == Gtk.ResponseType.OK:
            colour = colorsel.get_current_color()
            red = int(colour.red / 256)
            green = int(colour.green / 256)
            blue = int(colour.blue / 256)
            colorseldlg.destroy()
            return "{0},{1},{2}".format(str(red), str(green), str(blue))
        else:
            colorseldlg.destroy()
            return None

    def file_picker(browse_id):
        """
        Opens a file picker and returns the string (if result is OK)

        Expects:
            browse_id       An integer that determines the settings for the dialog.

        Browse IDs:
        1       Choose icon for tray applet

        """

        if browse_id == 1:
            help_text = _("Choose an icon to use for the tray applet.")
            filter_mode = "image"
        else:
            dbg.stdout("Unimplemented file picker!", dbg.error, 1)
            return

        win = Gtk.Window(title=_("Polychromatic Controller"))
        dialog = Gtk.FileChooserDialog(help_text, win, Gtk.FileChooserAction.OPEN, \
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        # Setup filters
        if filter_mode == "image":
            a = Gtk.FileFilter()
            a.set_name(_("All Images"))
            a.add_mime_type("image/jpeg")
            a.add_mime_type("image/png")
            a.add_mime_type("image/gif")
            a.add_mime_type("image/svg+xml")
            dialog.add_filter(a)

            j = Gtk.FileFilter()
            j.set_name("JPEG " + _("Image"))
            j.add_mime_type("image/jpeg")
            dialog.add_filter(j)

            p = Gtk.FileFilter()
            p.set_name("PNG " + _("Image"))
            p.add_mime_type("image/png")
            dialog.add_filter(p)

            g = Gtk.FileFilter()
            g.set_name("GIF " + _("Image"))
            g.add_mime_type("image/gif")
            dialog.add_filter(g)

            s = Gtk.FileFilter()
            s.set_name("SVG " + _("Image"))
            s.add_mime_type("image/svg+xml")
            dialog.add_filter(s)

        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            filename = dialog.get_filename()
            dialog.destroy()
            return filename
        else:
            dialog.destroy()
            return None


def parse_parameters():
    global _
    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("--version", help=_("Print progran version and exit"), action="store_true")
    parser.add_argument("-v", "--verbose", help=_("Be verbose to stdout"), action="store_true")
    parser.add_argument("-vv", "-d", "--debug", help=_("Be very verbose (for debugging)"), action="store_true")
    parser.add_argument("--print-device-info", help=_("Gets a list of capabilities for a device"), action="store_true")
    parser.add_argument("--locale", help=_("Force a specific locale, e.g. de_DE"), action="store")

    # For front-end debugging (developer tools)
    parser.add_argument("--inspect", help=argparse.SUPPRESS, action="store_true")

    args = parser.parse_args()

    if args.version:
        print("Polychromatic v" + version)
        exit(0)

    if args.verbose:
        dbg.verbose_level = 1
        dbg.stdout(_("Verbose enabled"), dbg.debug, 1)

    if args.debug:
        dbg.verbose_level = 2
        dbg.stdout(_("Debug verbose enabled"), dbg.debug, 2)

    if args.print_device_info:
        CommandLineOnly.print_device_capability_info()

    if args.inspect:
        dbg.verbose_level = 3

    if args.locale:
        _ = common.setup_translations(__file__, "polychromatic", args.locale)


def restart_tray_applet():
    print("Tray applet restarting...")
    try:
        pid = int(check_output(["pidof", "polychromatic-tray-applet"]))
        os.kill(pid, 9)
    except Exception:
        print("Tray applet is not running so not relaunching.")
        return

    # Where is the tray applet?
    if __file__.startswith("/usr"):
        tray_bin_path = "/usr/bin/polychromatic-tray-applet"
    else:
        tray_bin_path = os.path.abspath(os.path.join(path.data_source, "../polychromatic-tray-applet"))

    # Attempt to gracefully stop the process, then launch again.
    try:
        background_process(tray_bin_path)
    except OSError:
        print("Tray applet failed to relaunch.")
        return

    print("Tray applet reloaded.")


def show_fatal_error(code, traceback=None):
    """
    Interrupt the whole application and show a 'friendly' error message.

    controller      Controller() object.
    code            An integer that determines the message to display, as follows:
    traceback       A string containing traceback/exception details.

    change_screen params are as follows:
    [errcode, state, image_filename, title, message]

    Code    Reason
    ------  ----------------------------------------------------
    100     Daemon not installed (module import error)
    101     Daemon responded not found (not running)
    102     Daemon responded with exception (crashed)
    103     Daemon version mismatch
    104     Old daemon version detected
    105     User is not in plugdev group
    106     No devices found, but Razer PID detected
    107     No devices found
    108     Daemon not installed (can't find path)
    109     Daemon cannot be relaunched

    """
    params = [code]

    # Do not show another error again if one occurs.
    global deadlock
    if deadlock:
        return
    deadlock = True

    if code == 100:
        params += [
            "serious",
            "daemon-error.png",
            _("Daemon Not Installed"),
            _("Polychromatic requires the OpenRazer Python library, but it could not be imported.") +
                '<br>' + _("Please check the OpenRazer drivers, daemon and Python library are installed.") +
                '<br><a onclick="cmd(\'open?https://github.com/lah7/polychromatic\')">' + _("See the README for further information.") + '</a>'
        ]

    elif code == 101:
        params += [
            "serious",
            "daemon-error.png",
            _("Daemon Not Running"),
            _("Polychromatic uses the daemon to interact with your Razer devices, but it doesn't appear to be running.")
        ]

    elif code == 102:
        params += [
            "warning",
            "daemon-not-ready.png",
            _("Daemon Not Responding"),
            _("Polychromatic could not initialise the daemon. This could be caused by a bug with the daemon process.")
        ]

    elif code == 103:
        params += [
            "warning",
            "restart-required.png",
            _("Daemon requires a restart"),
            _("The daemon that is currently running is older than the installed version.") + "<br>" +
                _("This can cause glitches. Please restart the daemon to continue.") + "<br><br>" +
                _("This happens if the driver/daemon packages were updated, but you haven't restarted your session or computer.")
        ]

    elif code == 104:
        params += [
            "normal",
            "upgrade.png",
            _("Daemon Upgrade Required"),
            _("The Razer 'Chroma' driver and daemon currently installed on your system is no longer supported by Polychromatic.") + '<br>' +
                _("Please remove the current Razer driver/daemon from your system, then install OpenRazer from:") +
                ' <a onclick="cmd(\'open?https://openrazer.github.io/\')">http://openrazer.github.io/</a>'
        ]

    elif code == 105:
        try:
            whoami = str(os.getlogin())
        except FileNotFoundError:
            import pwd
            whoami = str(pwd.getpwuid(os.getuid())[0])
        except Exception:
            whoami = _("<username>")

        params += [
            "serious",
            "no-plugdev.png",
            _("Insufficient Privileges"),
            _("This user account is not in the 'plugdev' group, the daemon requires this to control your device(s).") + \
                '<br><br>' + _("Please run this command in the terminal, then log out then back in:") + \
                '<br><code>sudo gpasswd -a ' + whoami + ' plugdev</code>'
        ]

    elif code == 106:
        params += [
            "warning",
            "no-support.png",
            _("Device Not Recognised"),
            _("A Razer product is connected to your computer, but the daemon didn't detect it.") + '<br>' + \
                _("It is possible your Razer product is not bound to the driver properly or it is not yet supported.") + \
                '<br><br><u>' + _("Suggestions:") + '</u>' \
                '<br>• ' + _("Use the 'modprobe' command to bind the driver to the device.") + \
                '<br>• <u><a onclick="cmd(\'open?https://github.com/openrazer/openrazer#device-support\')">' + \
                _("Check whether your device PID is listed.") + '</u></a>' + \
                '<br>• ' + _("Check the daemon log:") + ' <a onclick="cmd(\'open?/home/$USER/.local/share/openrazer/logs/razer.log\')"><u><code>~/.local/share/openrazer/logs/razer.log</code></u></a>' + \
                '</u></a><br><br>' + \
                _("As this is a driver/daemon problem, please") + ' ' + \
                '<a onclick="cmd(\'open?https://github.com/openrazer/openrazer/wiki/Troubleshooting\')"><u>' + \
                    _("refer to the troubleshooting guide for further assistance.") + \
                '</u></a>'
        ]

    elif code == 107:
        params += [
            "normal",
            "no-device.png",
            _("No Razer Product Connected"),
            _("Please plug in your Razer device and reload the application/daemon.")
        ]

    elif code == 108:
        params += [
            "serious",
            "generic.png",
            _("Daemon Not Installed"),
            _("Could not find the executable for 'openrazer-daemon'. Please try re-installing the daemon.")
        ]

    elif code == 109:
        params += [
            "serious",
            "generic.png",
            _("Daemon cannot be relaunched."),
            _("Failed to execute 'openrazer-daemon'. Please check the daemon log to troubleshoot the problem.") + \
                '<br><code>~/.local/share/openrazer/logs/</code><br><br>' + _("Alternately, open a terminal and run:") + '<br><code>openrazer-daemon -Fv</code>'
        ]

    else:
        params += [
            "serious",
            "generic.png",
            _("Something went wrong"),
            _("There is no known reason for this error. That's very odd, as that should never happen! Please try again.")
        ]

    dbg.stdout("Ran into an error! Support Code: " + str(params[0]), dbg.error)
    dbg.stdout("  " + params[3], dbg.error)
    dbg.stdout("  " + params[4], dbg.error)

    if traceback:
        params.append(str(traceback))
        dbg.stdout("  " + traceback, dbg.error)

    app.change_screen("error", params)


def restart_daemon_service():
    from subprocess import check_output
    from shutil import which

    # Enough time to load "loading" page
    time.sleep(0.5)

    # Is the daemon actually installed?
    if not which("openrazer-daemon"):
        app.load_lock = False
        show_fatal_error(108)
        return

    # Gracefully stop the daemon
    print("Stopping openrazer-daemon.", end='')
    app.update_page("#status-text", "html", _("Stopping daemon..."))
    try:
        app.devman.stop_daemon()
    except Exception as NoneType:
        # Cannot stop gracefully. Skip this.
        pass

    # Wait for the daemon to stop.
    stopped = False
    app.update_page(".progress", "fadeIn", "fast")
    app.update_page(".progress-inner", "addClass", "increasing")

    for x in range(0, 5):
        print(".", end='')
        try:
            daemon_pid = int(check_output(["pidof", "openrazer-daemon"]))
        except:
            stopped = True
            break
        time.sleep(1)

    app.update_page(".progress", "fadeOut", "fast")
    app.update_page(".progress-inner", "removeClass", "increasing")

    # Kill the daemon if still not ended
    if not stopped:
        print("\nKilling openrazer-daemon...")
        app.update_page("#status-text", "html", _("Killing daemon process..."))
        os.kill(daemon_pid, 9)

    # Ensure a clean log
    print("\nArchiving log...")
    app.update_page("#status-text", "html", _("Archiving log..."))
    log_path = os.path.join(os.path.expanduser("~"), ".local/share/openrazer/razer.log")
    log_bak = os.path.join(os.path.expanduser("~"), ".local/share/openrazer/razer.log.bak")
    if os.path.exists(log_path):
        os.rename(log_path, log_bak)

    # Wait for daemon to start again
    time.sleep(1)
    print("\nStarting openrazer-daemon...")
    app.update_page("#status-text", "html", _("Starting daemon..."))
    background_process("openrazer-daemon", shell=True)

    # Check the process is running
    print("Waiting for openrazer-daemon to start...")
    app.update_page(".progress", "fadeIn", "fast")
    app.update_page(".progress-inner", "addClass", "increasing")
    for x in range(0, 5):
        print(".", end='')
        try:
            daemon_pid = int(check_output(["pidof", "openrazer-daemon"]))
            running = True
            break
        except:
            running = False
        time.sleep(1)

    if not running:
        app.load_lock = False
        show_fatal_error(109)
        return

    # Relaunch Controller / Tray Applet
    print("Relaunching Polychromatic...")
    app.update_page(".progress", "fadeOut", "fast")
    app.update_page("#loading", "fadeOut", "fast")
    app.update_page("#status-text", "fadeOut", "fast")
    restart_tray_applet()
    os.execv(__file__, sys.argv)


# For restarting the tray applet (only when running)
tray_pid_file = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet.pid")

if __name__ == "__main__":
    _ = common.setup_translations(__file__, "polychromatic")
    dbg = common.Debugging()
    parse_parameters()
    win = AppWindow()
    app = Controller()
    win.run()
