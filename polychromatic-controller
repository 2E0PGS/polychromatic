#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2017 Luke Horwell <luke@ubuntu-mate.org>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

version = "0.3.6.1"

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, Gdk, WebKit2

import os
import sys
import glob
import signal
import json
import gettext
import setproctitle
setproctitle.setproctitle('polychromatic-controller')
import time
import threading
from subprocess import Popen as background_process

try:
    import razer.client as rclient
    from razer_daemon.keyboard import get_keyboard_layout
    from razer_daemon.keyboard import RGB
    daemon_missing = False
except ImportError as e:
    # We'll show a graphical error when loading up.
    print("Failed to import modules for daemon.")
    print("Exception: " + str(e))
    daemon_missing = True

try:
    # Relative copy
    import pylib.preferences as pref
    import pylib.profiles as prof
except ImportError:
    # Installed to system
    import polychromatic.preferences as pref
    import polychromatic.profiles as prof
except Exception as e:
    print("One or more of Polychromatic's modules could not be imported!")
    print("Try re-installing the application.")
    print("\nException:" + str(e))
    exit(1)

path = pref.Paths()

# Imported on-demand:
#   * requests
#   * configparser
#   * shutil

class Translations(object):
    def __init__(self):
        # Use relative translations if available.
        if os.path.exists(os.path.join(data_source, '../locale/')):
            stdout.vprint("Using relative path for translations.")
            self.locale_path = os.path.join(data_source, '../locale/')
        else:
            stdout.vprint("Using '/usr/share/locale/' or falling back to 'en_US' for translations.")
            self.locale_path = '/usr/share/locale/'

        # Initialise i18n translations
        global _
        t = gettext.translation('polychromatic-controller', localedir=self.locale_path, fallback=True)
        _ = t.gettext

    def push(self, element, string, append=False):
        """
        Pushes a translatible string to the page.
        """
        # "append=True" is useful for elements that share contents.
        if append:
            app.update_page(element, 'append', "{0}".format(string))
        else:
            app.update_page(element, 'html', "{0}".format(string))

    def push_var(self, variable, string):
        """
        Pushes a translatable string to a JavaScript variable on the page.
        """
        app.webkit.run_javascript('var {0} = "{1}"'.format(variable, string))

    def get_effect_state_string(self, string):
        """
        Function to retrieve the current device effect as a human-readable string.
        """
        if string == 'spectrum':
            return _("Spectrum")
        elif string == 'wave':
            return _("Wave")
        elif string == 'reactive':
            return _("Reactive")
        elif string == 'breath':
            return _("Breath")
        elif string == 'ripple':
            return _("Ripple")
        elif string == 'static':
            return ("Static")
        elif string == 'none':
            return ("None")
        elif string == 'profile':
            return _("Profile")
        elif string == 'blinking':
            return _("Blinking")
        elif string == 'pulsate':
            return _("Pulsate")
        elif string == 'unknown':
            return _("Try one...")
        else:
            return string


class AppView(WebKit2.WebView):
    def __init__(self, startpage):
        """
        Initialise WebKit2
        """
        # Create WebKit Container
        webkit = WebKit2
        webkit.WebView.__init__(self)

        # Post-actions after pages fully load.
        self.connect('load-changed', self.load_changed_cb)
        self.connect('notify::title', self.title_changed_cb)
        self.connect('context-menu', self.context_menu_cb)
        stdout.vvprint('Initialised WebKit2.')

        try:
            # Allows Keyboard SVGs to load.
            self.get_settings().set_allow_file_access_from_file_urls(True)

            # Print console log errors to stdout
            self.get_settings().set_enable_write_console_messages_to_stdout(True)

            # Basic accessibility - keyboard navigation
            self.get_settings().set_enable_spatial_navigation(True)
            self.get_settings().set_enable_caret_browsing(True)
        except AttributeError:
            print("WebKit2GTK failed to initialise. Please try upgrading this dependency.\n")
            print("Your distribution may be using an older version of this package.")
            print("In Debian/Ubuntu, this package is provided in 'gir1.2-webkit-4.0'\n")
            print("At least v2.12 is required for this software to function.")
            sys.exit(1)

        # Load the starting page
        default_page = 'loading'
        self.load_uri('file://' + os.path.join(data_source, 'pages/' + startpage + '.html'))

    def title_changed_cb(self, view, frame):
        """
        Callback: Title changed ('commands' used for communicating to Python)
        """
        title = self.get_title()
        if title not in ["null", None, "", " "]:
            stdout.vvprint('** Command: ' + title)
            app.process_command(title)

    def load_changed_cb(self, view, frame):
        """
        Callback: Page changed
        """
        uri = str(self.get_uri())
        try:
            page = uri.rsplit('/', 1)[1].split('.html')[0]
        except IndexError:
            return
        if not self.is_loading():
            app.current_page = page
            stdout.vvprint(' ** Page Changed: ' + page)
            app.page_loaded()

    def context_menu_cb(self, view, menu, event, htr, user_data=None):
        """
        Callback: Disables the context menu.
        """
        return True

    class JavaScriptExecutor(object):
        """
        Collects JavaScript and send altogether, used for profile editing.
        """
        def __init__(self, webkit, script=None, wrapper=None):
            if wrapper is not None:
                self.wrapper = wrapper
            else:
                self.wrapper = "$(document).ready(function(){{{0}}});"
            self.lines = []
            self.webkit = webkit
            stdout.vvprint(' => JSExec: Ready.')

            if script is not None:
                self.add(script)

        def add(self, line):
            """
            Adds a line to the collection.
            :param line: Line to execute
            :type line: str

            :return: Returns a copy of the object
            :rtype: JavaScriptExecutor
            """
            line = str(line)
            stdout.vvprint(' => JSExec: Line added: ' + line)

            if line.endswith(';'):
                self.lines.append(line)
            else:
                self.lines.append(line + ';')

            return self

        def exec(self):
            """
            Runs the collection of commands.
            """
            payload = str(self)
            stdout.vvprint(' => JSExec: Pushed to page.')
            self.webkit.run_javascript(payload)

        def __lshift__(self, other):
            self.add(other)
            return self

        def __str__(self):
            lines = '\n' + '\n'.join(self.lines) + '\n'
            result = self.wrapper.format(lines)
            return result


class Controller(object):
    def __init__(self):
        """
        Initialises the application.
        """

        # Set up "memory" variables
        self.current_page = 'loading'
        self.load_lock = False

        # Set up variables provided by daemon
        try:
            self.kb_layout = get_keyboard_layout()
        except:
            self.kb_layout = 'gb'

        # Is this application installed in /usr/share or ran from repository?
        if os.path.exists(os.path.join(path.get_data_source(__file__) + "/../install/update.sh")):
            self.app_installed = False
        else:
            self.app_installed = True

    def start(self):
        """
        Assembles and runs the application.
        """
        # Initalise WebKit
        self.webkit = AppView(self.current_page)

        # Create window
        w = Gtk.Window(title="Polychromatic Controller")
        w.set_wmclass('polychromatic-controller', 'polychromatic-controller')
        w.set_position(Gtk.WindowPosition.CENTER)
        w.modify_bg(Gtk.StateType(0), Gdk.Color(34,34,34))
        w.set_resizable(False)
        self.window = w
        try:
            w.set_icon_from_file(os.path.join(data_source, '../install/hicolor/scalable/apps/polychromatic.svg'))
            stdout.vvprint('Window icon set from relative path.')
        except:
            w.set_icon_from_file('/usr/share/icons/hicolor/scalable/apps/polychromatic.svg')
            stdout.vvprint('Window icon set from /usr/share/ path.')

        # Add elements to window
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Scale the application so it looks good on large displays.
        scale = float(pref.get('editor', 'scaling', 1))
        if scale == 1.5:
            self.webkit.set_zoom_level(1.5)
            w.set_size_request(1500, 900)
        elif scale == 2:
            self.webkit.set_zoom_level(2)
            w.set_size_request(2000, 1200)
        elif scale == 2.5:
            self.webkit.set_zoom_level(2.5)
            w.set_size_request(2500, 1500)
        else:
            self.webkit.set_zoom_level(1)
            w.set_size_request(1000, 600)
        stdout.vprint('Program Scale Set: ' + str(scale))

        # Build an auto expanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)
        w.add(b)
        w.connect("delete-event", Gtk.main_quit)
        w.show_all()
        stdout.vvprint('Initialised Window.')

        # Kills process when CTRL+C'd.
        signal.signal(signal.SIGINT, signal.SIG_DFL)

        thread = threading.Thread(target=self.run_app, args=())
        thread.daemon = True
        thread.start()
        Gtk.main()

    def run_app(self):
        """
        Starts the main application's operations.
        """
        # Prepare devices
        stdout.vprint("Loading Daemon...")

        if daemon_missing:
            self.show_error_page(
                 "serious", "generic", _("Daemon Not Installed"),
                 _("Polychromatic requires the daemon, but it could not be imported. Please check the Razer drivers, daemon and Python library are installed.") +
                 '<br><br><a onclick="cmd(\'open?https://github.com/lah7/polychromatic\')">' + _("See the README for further information.") + '</a>')
            return

        try:
            self.devman = rclient.DeviceManager()
        except rclient.DaemonNotFound:
            print("ERROR: Daemon Not Found.")
            self.devman = None
            self.devman_error = "not-running"
        except Exception as e:
            print("ERROR: Exception: " + str(e))
            self.devman = None
            self.devman_error = "presume-crashed"
            self.devman_reason = str(e)

        # Display an upgrade message if using the old daemon.
        if os.path.exists("/usr/lib/python3/dist-packages/razer/inteface/keyboard.py") or os.path.exists(os.path.join(sys.path[-1], "/razer/inteface/keyboard.py")):
            print("ERROR: Daemon is incompatible with this version of the program.")
            self.show_error_page(
                "normal", "upgrade", _("Daemon Upgrade Required"),
                _("The Razer 'Chroma' driver and daemon currently installed on your system is no longer supported by Polychromatic.") + "<br><br>" +
                _("Please remove the current Razer driver/daemon from your system, then install the new one from: ") +
                '<a onclick="cmd(\'open?http://terrycain.github.io/razer-drivers/\')">http://terrycain.github.io/razer-drivers/</a>' +
                '<br><br><a onclick="cmd(\'open?https://github.com/lah7/polychromatic/releases/tag/v0.3.0\')">' +
                _("For more information, see the Release Notes for v0.3.0.") + '</a>')
            return

        # Display an error message if the daemon is having problems on the system.
        if not self.devman:
            print("ERROR: Could not connect to the Daemon Device Manager!")

            if self.devman_error == "not-running":
                self.show_error_page(
                     "serious", "generic", _("Daemon Not Running"),
                     _("Polychromatic uses the daemon to interact with your Razer devices, but it doesn't appear to be running."))
                return

            if self.devman_error == "presume-crashed":
                exception = ""
                for line in self.devman_reason.split('\n'):
                    exception += '<code>' + line + '</code><br>'
                self.show_error_page(
                     "serious", "generic", _("Daemon Not Responding"),
                     _("Polychromatic could not initialise the daemon. This could be caused by a bug with the daemon process.") + "<br><br>" +
                     _("Exception:") + ' <code>' + exception + '</code>')
                return

        # Display "No Devices Found" screen if none can be found
        if self.devman:
            self.devices = self.get_devices()
            if len(self.devices) == 0:
                # get_devices() function shows "No Devices Found".
                return

        # Initialise Profiles
        stdout.vprint("Loading Application Profiles...")
        self.profiles = prof.AppProfiles()
        self.profiles.selected_uuid = None
        self.profiles.previous_uuid = None

        # Set active device.
        if len(self.devices) == 0:
            self.active_device = None
            self.active_device_serial = None
            return
        else:
            self.active_device = self.devices[0]
            self.active_device_serial = self.devices[0].serial

        stdout.vprint('Application Ready.\n')
        self.show_menu('menu')

    def update_page(self, element, function, parm1=None, parm2=None):
        """
        Sends a jQuery function to the page, ensuring correctly parsed quotes.
        """
        if parm1 and parm2:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "', '" + parm2.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        if parm1:
            buffer = '$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "')"
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)
        else:
            buffer = '$("' + element + '").' + function + '()'
            stdout.vvprint(' => Push JS: ' + buffer)
            self.webkit.run_javascript(buffer)

    def show_menu(self, page):
        """
        Changes the current page in use.
        """
        self.current_page = page
        page_path = os.path.join(data_source, 'pages', page + '.html')

        if os.path.exists(page_path):
            self.webkit.load_uri('file://' + page_path)
        else:
            print("Unknown menu: " + page)

    def page_loaded(self):
        """
        Initialise the page when it has finished loading.
        """
        stdout.vvprint(' ** Running post-actions for page: "' + self.current_page + '"...')
        trans.push('#close-window', _("Close"))

        if self.current_page == 'menu':
            # Push strings
            trans.push('#page-header', _("Overview"))
            trans.push_var('str_overview', _("Overview"))
            trans.push('#str-brightness', _("Brightness"))
            trans.push('#str-lighting', _("Lighting Effects"))
            trans.push('#str-spectrum', _("Spectrum"))
            trans.push('#str-wave', _("Wave"))
            trans.push('#str-reactive', _("Reactive"))
            trans.push('#str-breath', _("Breath"))
            trans.push('#str-pulsate', _("Pulsate"))
            trans.push('#str-ripple', _("Ripple"))
            trans.push('#str-static', _("Static"))

            trans.push('#str-color', _("Color:"), True)
            trans.push('.str-custom', _("Custom..."))
            trans.push('.str-none', _("None"), True)
            trans.push('#str-direction', _("Direction:"), True)
            trans.push('#str-wave-left', _("Left"))
            trans.push('#str-wave-right', _("Right"))
            trans.push('#str-speed', _("Speed:"), True)
            trans.push('.str-random', _("Random"), True)
            trans.push('.str-single-col', _("Single Color"), True)
            trans.push('#str-dual-col', _("Dual Colors"), True)
            trans.push('#str-cycles', _("Cycle:"), True)
            trans.push('#str-colours', _("Colors:"), True)
            trans.push('#str-slow', _("Slow"), True)
            trans.push('#str-med', _("Medium"), True)
            trans.push('#str-fast', _("Fast"), True)

            trans.push('#str-modes', _("Key Modes"))
            trans.push('#str-game-mode', _("Gaming Mode"))
            trans.push('#game-mode-disable', _("Disable"))
            trans.push('#game-mode-enable', _("Enable"))
            trans.push('#game-mode-tip', _("Disables ALT+F4 and Super key."))
            trans.push('#str-macro-keys', _("Macro Keys"))
            trans.push('#macro-keys-enable', _("Activate"))
            trans.push('#profiles-activate', _("Activate"), True)
            trans.push('.str-help', _("Help"))

            trans.push('#str-profiles', _("Application Profiles"), True)
            trans.push('#profiles-new', _("New"), True)
            trans.push('#profiles-edit', _("Edit"), True)
            trans.push('#profiles-delete', _("Delete"), True)

            trans.push('#dialog-new-title', _("Create New Application Profile"))
            trans.push('#dialog-new-hint', _("Please enter a name for the new profile, and optionally an icon."))
            trans.push('#str-new-name', _("Application:"))
            trans.push('#str-new-icon', _("Icon Path:"))
            trans.push('#str-fetch-launcher', _("Select Installed Application"))
            trans.push('#dialog-new-cancel', _("Cancel"))
            trans.push('#dialog-new-ok', _("Create"))

            trans.push('#dialog-del-title', _("Delete"))
            trans.push('#dialog-del-hint', _("Are you sure you want to delete this?"))
            trans.push('#dialog-del-no', _("Keep"))
            trans.push('#dialog-del-yes', _("Delete"))

            trans.push('#dialog-applauncher-title', _("Choose an Application"))
            trans.push('#dialog-applauncher-hint', _("The information from the chosen program will be used as the profile's base."))
            trans.push('#dialog-applauncher-revert', _("Cancel"))
            trans.push('#dialog-applauncher-ok', _("Select"))

            trans.push('#dialog-help-title', _("Quick Help"))
            # Just the macro keys are present here.
            trans.push('#dialog-help-subtitle', _("Macro Keys Usage"))
            trans.push('#dialog-help-body', _("You can also use on-the-fly macro recording (provided by the daemon) by following these steps:") +
            '<ol><li>FN + <div class="macro-key"></div> ' + _("to enter macro mode.") + '</li>' +
            '<li>' + _("Press the macro key to assign to. E.g. M1") +'</li>' +
            '<li>' + _("Typing in your key combination.") +'</li>' +
            '<li>' + _("Exiting macro mode with ") + ' FN + <div class="macro-key"></div></li></ol>')
            trans.push('#dialog-help-close', _("Close"))

            trans.push('#str-browse-icon', _("Browse Icon"))

            # Page actions
            self.webkit.run_javascript('instantProfileSwitch = false;')
            self.update_page('#profiles-activate', 'show')
            self.refresh_device_list()
            self.refresh_profiles_list()

            # Tell JavaScript whether live profile switching is enabled.
            if pref.get('editor', 'live_switch', 'true') == 'true':
                self.webkit.run_javascript('live_switch = true;')
                self.update_page('#profiles-activate', 'hide')
            else:
                self.webkit.run_javascript('live_switch = false;')

            # If there are multiple devices connected, show the overview screen first.
            if len(self.devices) > 1:
                self.update_page(".device", "removeClass", "active")
                self.update_page("#device-overview-tab", "addClass", "active")
                self.update_page("#device-individual", "hide")
                self.update_page("#device-overview", "fadeIn")
            else:
                self.update_device_supported_features()
                self.update_device_active_options()

        elif self.current_page == 'profile_editor':
            # Push strings
            trans.push('#cancel', _("Cancel"))
            trans.push('#edit-preview', _("Preview"))
            trans.push('#edit-save', _("Save"), True)

            trans.push_var('str_set', _("Set"))
            trans.push_var('str_set_help', _("Click on a key to assign a color here."))
            trans.push_var('str_picker', _("Picker"))
            trans.push_var('str_picker_help', _("Click on a key to grab its color."))
            trans.push_var('str_clear', _("Clear"))
            trans.push_var('str_clear_help', _("Click on a key to clear."))
            self.webkit.run_javascript("set_mode('set')")

            trans.push('#str-edit-profile', _("Edit"), True)
            trans.push('#dialog-rename-title', _("Edit Profile Details"))
            trans.push('#dialog-rename-hint', _("Change the name and icon for this profile."))
            trans.push('#str-rename-name', _("Name:"))
            trans.push('#str-rename-icon', _("Icon Path:"))
            trans.push('#dialog-rename-cancel', _("Discard"))
            trans.push('#dialog-rename-ok', _("Save Changes"))
            trans.push('#str-browse-icon', _("Browse Icon"))

            # Initialise keyboard layout
            js_exec = self.webkit.JavaScriptExecutor(self.webkit)
            kb_callback = self.webkit.JavaScriptExecutor(None, wrapper="keyboard_obj.load(function(){{{0}}});")

            # Initalise colour picker
            self.print_colour_options("editor-colour", "#colour-selection", [0, 255, 0], "profile")

            # Collect profile details.
            uuid = self.profiles.selected_uuid
            self.webkit.run_javascript("var selected_profile = '{0}'".format(uuid))
            profile_path = os.path.join(path.profile_folder, str(uuid) + ".json")
            self.profiles.memory = pref.load_file(profile_path)
            profile_data = self.profiles.memory
            profile_name = profile_data["name"]
            profile_icon = profile_data["icon"]

            # Set profile title on page
            self.update_page("#profile-name", "html", profile_name)
            self.update_page("#profile-name", "fadeIn")

            # Set profile icon on page
            self.update_page("#profile-icon", "attr", "src", profile_icon)
            self.update_page("#profile-icon", "fadeIn")

            # Set keyboard layout
            kb_callback << "keyboard_obj.set_layout(\"kb-" + self.kb_layout + "\")"

            # Load profile into keyboard.
            self.profiles.selected_uuid = uuid
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, profile_data)

            for row in range(0, 6):
                for col in range(0, 22):
                    red = profile_data["rows"][str(row)][col][0]
                    green = profile_data["rows"][str(row)][col][1]
                    blue = profile_data["rows"][str(row)][col][2]
                    js_string = "keyboard_obj.set_key_colour({0},{1},\"#{2:02X}{3:02X}{4:02X}\")".format(row, col, red, green, blue)
                    kb_callback << js_string

            # Disable space key and FN for keyboards that don't support them.
            device_name = str(self.active_device.name)
            if device_name in "Razer BlackWidow Chroma" "Razer BlackWidow Ultimate":
                # Except that BW Ultimate 2016 does support the keys.
                if not device_name == "Razer BlackWidow Ultimate 2016":
                    kb_callback << "keyboard_obj.disable_key(5,7)"
                    kb_callback << "keyboard_obj.disable_key(5,12)"

            # Hide preview button if live previewing is enabled.
            if pref.get('editor', 'live_preview', 'true') == 'true':
                kb_callback << '$("#edit-preview").hide();'

            kb_callback << "$(\"#cancel\").attr({onclick: \"cmd('cancel-changes?"+ self.cancel_changes + "?" + uuid + "')\"})"

            js_exec << kb_callback
            js_exec.exec()

        elif self.current_page == 'preferences':
            # Push strings
            trans.push('#page-header', _("Preferences"))
            trans.push('#str-about', _("About"))
            trans.push('#str-tray', _("Tray Applet"))
            trans.push('#str-app-settings', _("General"))
            trans.push('#str-colours', _("Colors"))
            trans.push('#str-daemon', _("Daemon"))

            trans.push('#str-version-app', _("Version:"))
            trans.push('#str-version-config', _("Configuration:"))
            trans.push('#str-version-daemon', _("Daemon Version:"))
            trans.push('#str-version-lib', _("Razer Python Library:"))

            trans.push('#update-button', _("Check for Updates"))
            trans.push('#changelog-button', _("View Change Log"))
            trans.push('#releases-button', _("View Releases"))

            for device in self.devices:
                if device.name.startswith("Razer BlackWidow Chroma"):
                    self.update_page("#demo-chroma", "show")
                    trans.push('#demo-chroma', _("Play Demo - Razer BlackWidow Chroma Advert"))

            trans.push('#str-app-profiles', _("Application Profiles"))
            trans.push('#str-live-switch', _("Enable live switching"), True)
            trans.push('#str-live-switch-help', _("Activate profiles instantly as soon as you click on them."))
            trans.push('#str-live-preview', _("Enable live preview"), True)
            trans.push('#str-live-preview-help', _("While editing, show your changes on the actual keyboard."))
            trans.push('#str-activate-on-save', _("Always activate profiles after saving."), True)
            trans.push('#str-interface', _("Interface"))
            trans.push('#str-scaling', _("Scale:"))
            trans.push('#str-scaling-help', _("Scale the application so it looks good on large displays. Requires restart."))

            trans.push('#str-tray-icon', _("Tray Icon"))
            trans.push('#str-tray-light', _("Light"), True)
            trans.push('#str-tray-dark', _("Dark"), True)
            trans.push('#str-tray-animated', _("Chroma"), True)
            trans.push('#str-tray-custom', _("Use Custom Image"), True)
            trans.push('#tray-custom', _("Custom Icon:"), True)
            trans.push('#str-preferred-cols', _("Preferred Colors"), True)
            trans.push('#str-primary', _("Primary Color:"))
            trans.push('#str-secondary', _("Secondary Color:"))
            trans.push('.str-set', _("Set..."))
            trans.push('#str-startup', _("Start-up Settings"))
            trans.push('#str-startup-hint', _("These settings are applied when the Tray Applet is started. Ensure the tray applet automatically starts when you login."))
            trans.push('#str-enable-startup', _("Set preferences when the tray applet starts."), True)
            trans.push('#str-start-effect', _("Start Effect:"))
            trans.push('#str-disabled', _("No Change"))
            trans.push('#str-spectrum', _("Spectrum"))
            trans.push('#str-wave', _("Wave"))
            trans.push('#str-reactive', _("Reactive"))
            trans.push('#str-breath-r', _("Breath (Random)"))
            trans.push('#str-breath-s', _("Breath (Single Color)"))
            trans.push('#str-breath-d', _("Breath (Dual Color)"))
            trans.push('#str-static', _("Static"))
            trans.push('#str-none', _("None"))
            trans.push('#str-profile-mode', _("Activate a Profile"))
            trans.push('#str-start-bright', _("Start Brightness:"))
            trans.push('#str-auto-macro', _("Automatically enable the macro keys."), True)
            trans.push('#str-advanced', _("Advanced"))
            trans.push('#str-reset-pref', _("Reset Preferences"), True)
            trans.push('#str-reset-all', _("Reset Everything"))
            trans.push('#pref-save', _("OK"), True)

            trans.push_var('del_all_text', _("Are you sure you wish to erase all configuration and profiles?"))
            trans.push_var('no_change', _("No Change"))

            trans.push('#dialog-changelog-title', _("Update History"), True)
            trans.push('#dialog-changelog-subtitle', _("A human-readable list of changes made to Polychromatic."))
            trans.push('#dialog-close', _("Close"), True)

            trans.push('#str-daemon-title', _("About the Daemon"))
            trans.push('#str-daemon-info', _("The daemon is the software that communicates between the front-end applications and the driver."))
            trans.push('#str-website', _("Website"), True)
            trans.push('#str-project', _("Project"), True)
            trans.push('#str-issues', _("Issues"))
            trans.push('#str-troubleshooting', _("Troubleshooting"))
            trans.push('#str-device-support', _("Device/Daemon Support"))
            trans.push('#str-logs', _("Logs"))
            trans.push('#str-logs-help', _("Useful for diagnosing issues and debugging daemon-related operations."))
            trans.push('#str-watch', _("Watch"), True)

            trans.push('#str-daemon-options', _("Daemon Service"))
            trans.push('#str-daemon-stop', _("Stop"))
            trans.push('#str-daemon-restart', _("Restart"))
            trans.push('#str-daemon-service', _("If you have re-plugged devices, or are experiencing glitches, try restarting the daemon service."))
            trans.push('#str-options-missing', _("Could not read the daemon's configuration file."))
            trans.push('#str-options-restart', _("The daemon (and Polychromatic) needs to be restarted for the new settings to take effect."))

            # Append version information
            if self.app_installed:
                # Hide the option to update if the app is running globally.
                self.update_page('#str-version-app-string', "html", version)
                self.update_page("#update-button", "hide")
            else:
                # When running from 'master' directly.
                version_master = version[:-1] + str(int(version[-1:]) + 1)
                self.update_page('#str-version-app-string', "html", version_master + "-dev")

            self.update_page('#str-version-config-string', "html", str(pref.version))
            self.update_page('#str-version-lib-string', "html", str(self.devman.version))
            self.update_page('#str-version-daemon-string', "html", str(self.devman.daemon_version))

            # Populate start-up profiles list.
            self.refresh_profiles_list()

            # Set checkboxes
            for setting in ['live_switch','live_preview','activate_on_save']:
                if pref.get('editor', setting, 'true') == 'true':
                    self.update_page('#'+setting, 'prop', 'checked', 'true')

            # Fetch settings for tray/start-up settings.
            tray_icon_type = pref.get('tray_applet', 'icon_type', 'light')
            tray_icon_path = pref.get('tray_applet', 'icon_path', '')
            start_enabled = pref.get('startup', 'enabled', 'false')
            start_effect = pref.get('startup', 'start_effect', None)
            start_profile = pref.get('startup', 'start_profile', None)
            start_brightness = int(pref.get('startup', 'start_brightness', 0))
            start_macro = pref.get('startup', 'start_macro', 'false')

            # Adapt icons for different desktop environments.
            # MATE/Unity = "Humanity"
            # KDE = "Breeze"
            desktop_env = os.environ.get("XDG_CURRENT_DESKTOP")
            if desktop_env == "KDE":
                self.update_page("#tray-dark-preview", "attr", "src", "../tray/breeze-dark.svg")
                self.update_page("#tray-light-preview", "attr", "src", "../tray/breeze-light.svg")

            # Set value for slider
            scaling = pref.get('editor', 'scaling', 1)
            self.update_page('#scaling', 'val', str(scaling))

            # Set 'values' for textboxes and dropdowns.
            self.update_page('#tray-'+tray_icon_type, 'prop', 'checked', 'true')
            self.update_page('#tray-icon-path', 'val', tray_icon_path)
            self.update_page('#tray-icon-path-preview', 'attr', 'src', tray_icon_path)
            self.update_page('#start-effect-dropdown', 'val', start_effect)
            self.update_page('#profiles-list', 'val', start_profile)
            self.update_page('#start-brightness', 'val', str(start_brightness))

            if start_macro == 'true':
                self.update_page('#start-macro', 'prop', 'checked', 'true')

            # Hide/Show UI elements
            if start_enabled == 'true':
                self.update_page('#startup-enabled', 'prop', 'checked', 'true')
                self.update_page('.startup-options', 'show')

            if start_effect == 'profile':
                self.update_page('#profiles-list', 'show')
            else:
                self.update_page('#profiles-list', 'hide')

            if start_brightness == 0:
                self.update_page('#start-brightness-text', 'html', _("No Change"))
            else:
                self.update_page('#start-brightness-text', 'html', str(int((start_brightness * 100) / 255 )) + '%')


            # Reads and sets configuration set in razer.conf
            self.config_path = os.path.join(os.path.expanduser('~'), ".razer-service", "razer.conf")
            import configparser
            self.daemon_config = configparser.ConfigParser()

            if os.path.exists(self.config_path):
                self.daemon_config.read(self.config_path)
            else:
                self.update_page("#daemon-options-missing", "show")
                for element in ["verbose-logging", "sync-effects", "screensaver", "key-statistics"]:
                    self.update_page("#daemon-"+element, "addClass", "disabled")
                    self.update_page("#str-"+element, "addClass", "disabled")

            """ Sets the initial checkbox state for razer.conf daemon settings """
            def read_daemon_config(group, item, element, label, description):
                element_checkbox = "#daemon-" + element
                element_label = "#str-" + element
                element_help = "#str-" + element + "-help"
                self.update_page(element_label, "append", label)
                self.update_page(element_help, "html", description)
                if not self.daemon_config.has_option(group, item):
                    self.update_page(element_checkbox, "addClass", "disabled")
                    self.update_page(element_label, "addClass", "disabled")
                    return

                if self.daemon_config.get(group, item) == 'True':
                    self.update_page(element_checkbox, "prop", "checked", "true")

            read_daemon_config("General", "verbose_logging", "verbose-logging", _("Verbose Logging"), _("Show lots of debug messages."))
            read_daemon_config("Startup", "sync_effects_enabled", "sync-effects", _("Sync Effects to All Devices"), _("When setting an effect, apply this to all other connected devices (where supported)."))
            read_daemon_config("Startup", "devices_off_on_screensaver", "screensaver", _("Turn off devices when screensaver is running"), _("Not all desktop environments support this feature."))
            read_daemon_config("Statistics", "key_statistics", "key-statistics", _("Generate Key Statistics"), _("Collects number of key presses per hour for generating heatmaps."))

        elif self.current_page == 'error':
            self.update_page("#close-window", "html", _("Quit"))
            self.update_page("#restart-app", "html", _("Retry"))
            self.update_page("#restart-daemon", "html", _("Restart Daemon"))
            self.update_page("#error-icon", "attr", "src", "../img/error/" + self.error_icon + ".png")
            self.update_page("#error-title", "html", self.error_title)
            self.update_page("#error-title", "addClass", self.error_class)
            self.update_page("#error-details", "html", self.error_message)

        else:
            stdout.vvprint('No post-actions for this page.')

    def refresh_profiles_list(self):
        """
        Reloads the key light profiles created by the user.
        """
        stdout.vvprint('Refreshing profile list...')
        self.update_page('#app-profiles', 'html' , ' ')
        uuid_in_use = pref.get_device_state(self.active_device.serial, "main", "profile")

        # Function to append to page.
        def append_item(uuid, data):
            css_id = "app-" + uuid
            title = data["name"]
            title = title.replace("'", '&#39;').replace('"', '&#39;')
            try:
                icon_path = data["icon"]
            except:
                icon_path = path.get_data_source(__file__) + "/img/profile-default.svg"
            if self.current_page == "menu":

                # Show highlight in UI if in use
                extra_class = ""
                if uuid_in_use:
                    if uuid == uuid_in_use:
                        extra_class = "active"

                self.update_page('#app-profiles', 'append', "<button class='app-profile-item {4}' id='{0}' onclick='profile_list_change(\"{0}\", \"{3}\", \"{2}\")'><img src='{1}'>{2}</button>".format(css_id, icon_path, title, uuid, extra_class))

            elif self.current_page == "preferences":
                self.update_page('#profiles-list', 'append', "<option value='{1}'>{0}</option>".format(title, uuid))

        # Sort the profiles A-Z.
        sorted_names = {}
        for uuid in self.profiles.list_profiles():
            data = self.profiles.load_profile(str(uuid))
            try:
                human_name = data["name"]
            except:
                print("Profile UUID corrupt: " + str(uuid))
                continue
            sorted_names[human_name] = int(uuid)

        item_no = 0
        for program in sorted(sorted_names):
            uuid = sorted_names[program]
            data = self.profiles.load_profile(str(uuid))
            item_no += 1
            append_item(str(uuid), data)

    def process_command(self, command):
        """
        Processes a command passed from the page to Python.
        """
        if command == 'quit':
            quit()

        ## Effects & Keyboard Controls
        elif command.startswith('brightness'):
            """
            Expects:  brightness?<source>?<value>
            """
            source = command.split("?")[1]
            value = command.split("?")[2]
            try:
                if source == "main":
                    self.active_device.brightness = int(value)
                elif source == "logo":
                    if value == "toggle":
                        if self.active_device.fx.misc.logo.active == True:
                            self.active_device.fx.misc.logo.active = False
                        else:
                            self.active_device.fx.misc.logo.active = True
                    else:
                        self.active_device.fx.misc.logo.brightness = int(value)
                elif source == "scroll":
                    self.active_device.fx.misc.scroll_wheel.brightness = int(value)

                if value != "toggle":
                    pref.set_device_state(self.active_device.serial, source, "brightness", int(value))

                self.update_device_active_options()

            except Exception as exception:
                self.print_error(exception, str(_("Failed to set/change brightness for {0}.")).replace("{0}",self.active_device.name))

        elif command.startswith('effect'):
            """
            Expects:  effect?<source>?<effect>?[params]
            """
            source = command.split("?")[1]
            effect = command.split("?")[2]
            colours = pref.get_device_state(self.active_device.serial, source, "colour_primary")

            try:
                params = command.split("?")[3]
            except Exception:
                params = None

            if colours == None:
                colours = [0, 255, 0]

            try:
                self.set_lighting_effect(source, effect, params)
                self.update_lighting_options(source, effect)
            except Exception as exception:
                self.print_error(exception, str(_("Failed to set effect '{0}' for {1}.")).replace("{0}",effect).replace("{1}",self.active_device.name))

            pref.set_device_state(self.active_device.serial, source, "effect", effect)
            self.update_device_active_options()
            self.update_background_header(colours)

        elif command == 'enable-marco-keys':
            self.active_device.macro.enable_macros()
            self.update_page('#macro-keys-enable', 'addClass', 'disabled')
            self.update_page('#macro-keys-enable', 'html', "In Use")

        elif command == 'gamemode-enable':
            self.active_device.game_mode_led = True
            self.update_page('#game-mode-status', 'html', 'Enabled')
            self.update_page('#game-mode-enable', 'hide')
            self.update_page('#game-mode-disable', 'show')
            try:
                pref.set_device_state(self.active_device.serial, "main", "game_mode", True)
            except Exception as exception:
                self.print_error(exception, str(_("Failed to change game mode for {0}.")).replace("{0}",self.active_device.name))

        elif command == 'gamemode-disable':
            self.active_device.game_mode_led = False
            self.update_page('#game-mode-status', 'html', 'Disabled')
            self.update_page('#game-mode-enable', 'show')
            self.update_page('#game-mode-disable', 'hide')
            try:
                pref.set_device_state(self.active_device.serial, "main", "game_mode", False)
            except Exception as exception:
                self.print_error(exception, str(_("Failed to change game mode for {0}.")).replace("{0}",self.active_device.name))

        elif command == 'refresh-overview-screen':
            self.refresh_device_list()

        ## Changing colours for this session.
        elif command.startswith('ask-colour'):
            """
            Expects:  ask-colour?<colour_id>?<source>
            """
            colour_id = command.split('?')[1]
            source = command.split('?')[2]
            picker = Dialogues.color_picker()
            if picker == None:
                return
            else:
                picker = picker.split(',')
            command = "set-colour?{0}?{1}?{2}?{3}?{4}".format(colour_id, picker[0], picker[1], picker[2], source)
            self.process_command(command)

        elif command.startswith('set-colour'):
            """
            Expects these parameters separated by '?' in order:
                colour_id   = Element name (also used for persistance/saving and setting preview element)
                red         = 0-255 RGB
                green       = 0-255 RGB
                blue        = 0-255 RGB
                source      = Which light source is assigned to this colour?
            """
            params = command.split('set-colour?')[1].split('?')
            colour_id = params[0]
            red = int(params[1])
            green = int(params[2])
            blue = int(params[3])
            source = params[4]

            colour_id_state = colour_id.replace("-", "_")
            pref.set_device_state(self.active_device.serial, source, colour_id_state, [red, green, blue])

            preview_element = "#{0}-{1}-preview".format(colour_id, source)
            self.update_page(preview_element, "css", "background-color", "rgba({0},{1},{2},1)".format(str(red), str(green), str(blue)))
            print("Set colour of '{0}' to {1}, {2}, {3}".format(colour_id, int(red), int(green), int(blue)))

            # In profile editor, changing colour must 'reload' the tool.
            if self.current_page == "profile_editor":
                self.webkit.run_javascript("set_mode('set')")

        ## Cancel to main menu.
        ## '?xxxx' may specify changes to also make when leaving application profile editor.
        elif command.startswith('cancel-changes'):
            if command.find('?') > -1:
                command, cancel_type, cancel_args = command.split('?')
                if cancel_type == "new-profile":
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        self.profiles.remove_profile(self.profiles.selected_uuid)
                        if self.profiles.previous_uuid:
                            self.profiles.send_profile_from_file(self.active_device, self.profiles.previous_uuid)
                elif cancel_type == "edit-profile":
                    if pref.get('editor', 'live_switch', 'true') == 'true' or pref.get('editor', 'live_preview', 'true') == 'true':
                        if self.profiles.previous_uuid:
                            self.profiles.send_profile_from_file(self.active_device, self.profiles.previous_uuid)

                self.update_page('#cancel', 'attr', '{onclick: \"cmd(\'cancel-changes\')\"}')
            self.show_menu('menu')

        ## Preferences
        elif command == 'pref-open':
            self.show_menu('preferences')

        elif command.startswith('run?'):
            command = command.split('run?')[1]
            background_process(command, shell=True)

        elif command.startswith('open?'):
            target = command.split('open?')[1]
            os.system('xdg-open "' + target + '"')

        elif command.startswith('pref-set?'):
            # pref-set ? <group> ? <setting> ? <value>
            group = command.split('?')[1]
            setting = command.split('?')[2]
            value = command.split('?')[3]
            pref.set(group, setting, value)

        elif command == 'pref-close':
            self.show_menu('menu')

        elif command == 'pref-reset-conf':
            print('User requested to reset configuration.')
            pref.clear_config()
            pref.load_pref()
            print('Configuration successfully reset.')
            self.show_menu('preferences')

        elif command == 'pref-reset-all':
            print('User requested to reset everything.')
            pref.clear_config()
            print('\nRestarting the application...\n')
            os.execv(__file__, sys.argv)

        ## Profile Editor / Management
        elif command.startswith('profile-edit'):
            self.profiles.selected_uuid = command.split('profile-edit?')[1].replace('%20', ' ')
            self.profiles.previous_uuid = self.profiles.selected_uuid
            self.cancel_changes = 'edit-profile'
            if self.profiles.selected_uuid is not None:
                self.show_menu('profile_editor')
            else:
                print('No profile UUID specified. Nothing to open.')

        elif command.startswith('set-key'):
            # Parse position/colour information
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])
            colour = command.split('?')[3]
            red = int(colour.strip('rgb()').split(',')[0])
            green = int(colour.strip('rgb()').split(',')[1])
            blue = int(colour.strip('rgb()').split(',')[2])
            self.profiles.memory["rows"][str(row)][col] = (red, green, blue)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('clear-key'):
            command = command.replace('%20',' ')
            row = int(command.split('?')[1])
            col = int(command.split('?')[2])
            self.profiles.memory["rows"][str(row)][col] = (0, 0, 0)

            # Live preview (if 'live_preview' is enabled in preferences)
            if pref.get('editor', 'live_preview', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-activate'):
            command = command.replace('%20',' ')

            # Send to keyboard
            uuid = command.split('profile-activate?')[1]
            self.webkit.run_javascript('set_cursor("html","wait")')
            self.profiles.send_profile_from_file(self.active_device, uuid)
            self.webkit.run_javascript('set_cursor("html","normal")')

            # Update UI
            data = self.profiles.get_metadata(uuid)
            self.update_page("#fx-options-main", "html", " ")
            self.update_page("#active-effect", "html", "<img src='{1}'/> {0}".format(data.get("name"), data.get("icon")))
            self.update_background_header([0, 255, 0])

            # Update persistance file
            pref.set_device_state(self.active_device.serial, "main", "effect", "profile")
            pref.set_device_state(self.active_device.serial, "main", "profile", uuid)

        elif command == 'profile-preview':
            self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-del'):
            uuid = command.split('?')[1]
            self.profiles.remove_profile(uuid)
            self.refresh_profiles_list()
            restart_tray_applet()

        elif command.startswith('profile-new'):
            profile_name = command.split(';')[1].replace('%20', ' ')
            profile_icon = command.split(';')[2].replace('%20', ' ')
            self.profiles.previous_uuid = self.profiles.selected_uuid
            uuid = self.profiles.new_profile()
            self.profiles.selected_uuid = uuid
            self.cancel_changes = 'new-profile'
            self.profiles.set_metadata(uuid, "name", profile_name)
            if os.path.exists(profile_icon):
                self.profiles.set_metadata(uuid, "icon", profile_icon)
            else:
                profile_icon = pref.path.get_data_source(__file__) + "/img/profile-default.svg"
                self.profiles.set_metadata(uuid, "icon", profile_icon)
            self.show_menu('profile_editor')
            restart_tray_applet()

        elif command.startswith('profile-set-metadata'):
            new_name = command.split(';')[1].replace('%20', ' ')
            new_icon = command.split(';')[2].replace('%20', ' ')

            # Determine if icon really exists and fallback if not.
            if os.path.exists(new_icon):
                self.profiles.memory["icon"] = new_icon
            else:
                new_icon = pref.path.get_data_source(__file__) + "/img/profile-default.svg"

            # New values are saved to profile stored in memory.
            self.profiles.memory["name"] = new_name
            self.profiles.memory["icon"] = new_icon

        elif command == 'profile-save':
            uuid = self.profiles.selected_uuid
            print("Saving profile UUID: " + str(uuid))
            self.profiles.save_profile_from_memory(uuid)
            self.show_menu('menu')

            if pref.get('editor', 'activate_on_save', 'true') == 'true':
                self.profiles.send_profile_to_keyboard(self.active_device, self.profiles.memory)

        elif command.startswith('profile-rename'):
            uuid = command.split('?')[1]
            uuid_css = 'app-' + uuid

            data = self.profiles.memory
            name = data["name"]
            icon = data["icon"]

            self.update_page('#dialog-rename-name', 'val', name)
            self.update_page('#dialog-rename-icon', 'val', icon)
            self.update_page('#dialog-rename-name-preview', 'html', name)
            self.update_page('#dialog-rename-icon-preview', 'attr', 'src', icon)
            self.webkit.run_javascript("rename_profile_dialog_open()")

        ## List application launchers to create profiles for.
        elif command == 'fetch-app-launchers':
            unknown_icon_path = pref.path.get_data_source(__file__) + "/img/ui/generic-application.svg"

            # Functions for this feature.
            def append_item(uid, name, icon_path):
                css_id = "launcher-" + uid
                if not os.path.exists(icon_path):
                    icon_path = unknown_icon_path
                self.update_page('#app-launchers', 'append', "<button class='app-launcher-item' id='{0}' onclick='prefill_launcher(\"{0}\", \"{1}\", \"{2}\")'><img src='{2}'><span>{1}</span></button>".format(uid, name, icon_path))

            def read_launcher(path):
                contents = ''
                with open(path) as stream:
                    contents = stream.readlines()
                return contents

            def read_line(data, item):
                for line in data:
                    if line.startswith(item):
                        findings = line.split(item)[1].replace('\n','')
                        return findings
                return 'null'

            # Clear the list, if previously opened.
            self.update_page('#app-launchers', 'html', ' ')
            unique_id = 0

            # Gather a list of launchers from A-Z.
            system_apps = '/usr/share/applications/*.desktop'
            user_apps = os.path.join(os.path.expanduser('~'), '.local', 'share', 'applications/')

            if os.path.isdir(user_apps):
                user_launchers = glob.glob(user_apps + '*.desktop')
                user_launchers.sort()
            else:
                user_launchers = []

            sys_launchers = glob.glob(system_apps)
            sys_launchers.sort()

            launchers = []
            launchers.extend(user_launchers)
            launchers.extend(sys_launchers)

            for path in launchers:
                unique_id += 1
                try:
                    contents = read_launcher(path)
                    app_name = read_line(contents, 'Name=')
                    app_icon = read_line(contents, 'Icon=')
                except:
                    # Skip any invalid launchers.
                    continue

                if os.path.exists(app_icon):
                    # Icon is already an abs. path.
                    icon_path = app_icon
                else:
                    # Use GTK to determine theme icon.
                    try:
                        icon_path = icon_name_to_path(app_icon)
                        if not os.path.exists(icon_path):
                            # Icon path couldn't be determined.
                            icon_path = unknown_icon_path
                    except:
                        icon_path = unknown_icon_path

                append_item(str(unique_id), app_name, icon_path)

        ## Open the file browser and return a successful path to that div.
        elif command.startswith("browse-file-icon"):
            div_id = command.split('?')[1]
            path = Dialogues.file_picker(_("Choose Application Profile Icon"), 'image')
            if path != None:
                self.update_page('#'+div_id, 'val', path)
                self.update_page('#'+div_id+'-preview', 'attr', 'src', path)
            else:
                return

        ## Miscellaneous
        elif command == 'open-config-folder':
            os.system('xdg-open "' + pref.path.root + '"')

        elif command == 'restart-tray':
            restart_tray_applet()

        elif command == 'reset-app':
            os.execv(__file__, sys.argv)

        elif command == 'update-check':
            update_script = os.path.join(pref.Paths.get_data_source(__file__) + "/../install/update.sh")
            if os.path.exists("/usr/bin/x-terminal-emulator"):
                background_process('x-terminal-emulator -e "{0}"'.format(update_script), shell=True)
            else:
                background_process('xterm -e "{0}"'.format(update_script), shell=True)

        elif command == 'fetch-changelog':
            import requests

            def fetch_failed():
                self.update_page("#dialog-changelog-body", "html", ("Unable to fetch the changelog."))
                self.webkit.run_javascript("changelog_dialog_open()")

            try:
                r = requests.get('https://raw.githubusercontent.com/lah7/polychromatic/master/CHANGELOG')
            except:
                fetch_failed()
                return

            if r.status_code == 200:
                self.update_page("#dialog-changelog-body", "html", " ")
                ver = 0
                for line in r.text.split('\n'):
                    if line.startswith("#"):
                        ver = line[1:].strip()
                        if ver == version:
                            self.update_page("#dialog-changelog-body", "append", "<h3><span class='fa fa-arrow-right'></span> " + ver + "</h3>")
                        else:
                            self.update_page("#dialog-changelog-body", "append", "<h3>" + ver + "</h3>")
                        self.update_page("#dialog-changelog-body", "append", "<p><a style='color:lime;text-decoration:underline' href='#' onclick='open_release_note(\"{0}\")'>".format(ver) + _("View Release Notes") + "</a></p>")
                    elif line == '':
                        continue
                    else:
                        if ver == version:
                            self.update_page("#dialog-changelog-body", "append", "<li style='color:lime'>" + line.split('*')[1] + "</li>")
                        else:
                            self.update_page("#dialog-changelog-body", "append", "<li>" + line.split('*')[1] + "</li>")
                self.webkit.run_javascript("changelog_dialog_open()")
            else:
                fetch_failed()
                return

        elif command.startswith('daemon-set-config?'):
            group = command.split('?')[1]
            item = command.split('?')[2]
            value = command.split('?')[3]
            stdout.vprint("Writing to razer.conf: [{0}] -> {1} = {2}".format(group, item, value))
            self.daemon_config[group][item] = value
            with open (self.config_path, 'w') as f:
                self.daemon_config.write(f)

        elif command == 'daemon-restart':
            self.load_lock = True
            self.show_menu("loading")
            thread = threading.Thread(target=restart_daemon_service)
            thread.daemon = True
            thread.start()

        elif command == 'daemon-stop':
            self.devman.stop_daemon()
            self.show_error_page(
                "serious", "generic", _("Daemon gracefully stopped."),
                _("The daemon has been requested to shut down. To use Polychromatic again, restart the daemon."))

        elif command == 'timeout-error':
            self.show_error_page(
                "serious", "generic", _("Something went wrong."),
                _("Polychromatic took too long to initialise the application or daemon. Please reload and try again."))

        elif command == 'demo-chroma':
            chroma = None
            for device in self.devices:
                device.fx.none()
                if device.name.startswith("Razer BlackWidow Chroma"):
                    chroma = device
            if chroma == None:
                print("Refusing to play demo when keyboard is not present!")
                return
            else:
                demo = RazerChromaKeyboardDemo(self.webkit, self.profiles, chroma, self.show_menu)
                self.show_menu("demo")

        ## Multi Device Support
        elif command.startswith('device-select?'):
            selected_serial = command.split('?')[1]
            selected_device = None

            # Loop through each device object until we find the device.
            for device in self.devices:
                if device.serial == selected_serial:
                    selected_device = device

            if selected_device:
                self.active_device = selected_device
                self.active_device_serial = selected_device.serial
            else:
                print("Could not locate device with serial: " + selected_serial)
                return

            stdout.vprint("Selected: {0} [{1}]".format(selected_device.name, selected_serial))

            # Clear any options from previous devices
            self.update_page(".fx-options", "html", " ")
            self.update_page("#fx-colour-primary", "hide")
            self.update_page("#fx-colour-secondary", "hide")

            # Update options for device screen
            self.update_device_supported_features()
            self.update_device_active_options()

        else:
            print("Unimplemented command: " + command)

    def print_error(self, exception, human_text):
        """
        Shows a graphical error message to the page.
        """
        self.webkit.run_javascript("showWarning('" + human_text.replace("'", '"') + "')")
        stdout.error(human_text)
        stdout.error('Exception: ' + str(exception))

    def get_devices(self):
        """
        Refreshes the currently connected devices, retrieved via the daemon.
        """
        stdout.vprint("Gathering Devices...")
        found_devices = []
        for device in self.devman.devices:
            stdout.vprint(" -- Found: " + str(device))
            found_devices.append(device)

        # Show an error if no devices were returned by the daemon.
        if len(found_devices) == 0:
            stdout.vprint("WARN: Daemon did not return any devices.")
            # Scan 'lsusb' in case device is incompatible with daemon.
            import subprocess
            lsusb = str(subprocess.Popen("lsusb", stdout=subprocess.PIPE).communicate()[0])
            lsusb.find("ID 1532")
            if lsusb == -1:
                message = _("Please plug in your Razer device and reload the daemon/application.")
            else:
                message = _("However, Polychromatic detected there is a Razer product connected to your computer.") + '<br><br>' + \
                          _("This could mean your Razer product is not bound to the driver properly, the daemon doesn't recognise it or it's not yet supported.") + \
                          '<br><br><u>' + _("Suggestions:") + '</u>' \
                          '<br>• ' + _("Try reloading the daemon.") + \
                          '<br>• ' + _("Ensure your user is added to the 'plugdev' group.") + \
                          '<br>• ' + _("Use the 'modprobe' command to bind the driver to the device.") + \
                          '<br>• <u><a onclick="cmd(\'open?https://github.com/terrycain/razer-drivers#device-support\')">' + \
                                _("Check whether your device is fully supported.") + \
                           '</u></a><br><br>' + \
                           '<a onclick="cmd(\'open?https://github.com/terrycain/razer-drivers/wiki/Troubleshooting\')"><u>' + \
                                _("Please refer troubleshooting guide on the driver/daemon repository for further assistance.") + \
                           '</u></a>'

            self.show_error_page("warning", "nodevice", _("No Devices Found"), message)
            return([])

        return(found_devices)

    def refresh_device_list(self):
        """
        Refreshes the graphical interface by re-populating the device tabs.
        """
        # If the daemon doesn't have any devices, there is nothing to show.
        if len(self.devices) == 0:
            return

        selected_id = self.active_device.serial

        if self.current_page == "menu":
            self.update_page(".device", "remove")
            self.update_page("#device-tabs", "append", "<button id='device-overview-tab' class='device' onclick='switchPaneOverview(); changeHeaderImg(\"overview\", \"black\")'><img src='../img/ui/overview.svg'> <span>{0}</span></button>".format(_("Overview")))
            self.update_page("#device-overview", "html", "<h3>{0}</h3>".format(_("Connected Devices")))

            for device in self.devices:
                name = str(device.name)
                serial = str(device.serial)
                img = self.get_device_image(device, "icon")
                htmlbuffer = "<button id='{0}' class='device' onclick='switchPaneDevice(\"{0}\")' title=\"{2}\"><img src='{1}'> <span>{2}</span></button>".format(serial, img, name)
                self.update_page("#device-tabs", "append", htmlbuffer)

                # Compile status data together (for multiple light sources)
                buffer_effect = ""
                buffer_brightness = ""
                for source in ["main", "logo", "scroll"]:
                    if source == "main":
                        capability = "lighting"
                    else:
                        capability = "lighting_" + source

                    if not device.has(capability):
                        continue

                    try:
                        if source == "main":
                            current_brightness = int(device.brightness)
                        elif source == "logo":
                            current_brightness = int(device.fx.misc.logo.brightness)
                        elif source == "scroll":
                            current_brightness = int(device.fx.misc.scroll_wheel.brightness)
                    except:
                        current_brightness = None

                    current_effect = pref.get_device_state(device.serial, source, "effect")
                    current_colour = pref.get_device_state(device.serial, source, "colour_primary")

                    if current_brightness:
                        if len(buffer_brightness) == 0:
                            buffer_brightness = str(current_brightness) + "%"
                        else:
                            buffer_brightness += " / " + str(current_brightness) + "%"

                    if current_effect:
                        if len(buffer_effect) > 0:
                            buffer_effect += "&nbsp;"

                        if not current_colour:
                            current_colour = [0, 255, 0]

                        if current_effect in ["spectrum", "wave"]:
                            class_effects = current_effect
                        else:
                            class_effects = None

                        buffer_effect += "<img {0}/> <span {1}>{2}</span>".format(
                                            self.generate_css_colour_svg("../img/effects/{0}.svg".format(current_effect), current_colour, 22, 22, class_effects),
                                            self.generate_css_colour_text(current_colour, class_effects),
                                            trans.get_effect_state_string(current_effect)
                                        )

                    if current_effect == "profile":
                        uuid = pref.get_device_state(self.active_device.serial, source, "profile")
                        profile_data = self.profiles.load_profile(uuid)
                        profile_name = profile_data["name"]
                        profile_icon = profile_data["icon"]
                        buffer_effect = "<img src='{0}'/> <span>{1}</span>".format(profile_icon, profile_name)

                # No brightness or effect set?
                if buffer_brightness and len(buffer_brightness) == 0:
                    buffer_brightness = None

                if buffer_effect and len(buffer_effect) == 0:
                    buffer_effect = None

                # Determine device image
                img_path = self.get_device_image(device, "actual", "side_img")
                img_opacity = "1"

                ## If from filesystem, assume own generic icon is used instead
                if img_path.startswith("../"):
                    img_opacity = "0.2"

                # Piece device together
                htmlbuffer = ""
                htmlbuffer += "<div class='device-card' onclick='switchPaneDevice(\"{0}\")'>".format(serial)
                htmlbuffer +=   "<img src='{0}' style='opacity:{1};'/>".format(img_path, img_opacity)
                htmlbuffer +=   "<h4>{0}</h4>".format(name)
                if device.has("serial"):
                    htmlbuffer +=   "<p><b>{0}:</b>&nbsp; {1}</p>".format(_("Serial"), serial)
                if device.has("firmware_version"):
                    htmlbuffer +=   "<p><b>{0}:</b>&nbsp; {1}</p>".format(_("Firmware"), device.firmware_version)
                if buffer_effect:
                    htmlbuffer +=   "<p id='device-{0}-effect' class='effect-status'> {1}</p>".format(serial, buffer_effect)
                if buffer_brightness:
                    htmlbuffer +=   "<p class='brightness-status'><span class='fa fa-lightbulb-o'></span> <span id='device-{0}-brightness'>{1}</span></p>".format(serial, str(buffer_brightness))
                htmlbuffer += "</div>"
                self.update_page("#device-overview", "append", htmlbuffer)

            self.update_page("#" + selected_id, "addClass", "active")
            if len(self.devices) > 4:
                self.update_page("#device-tabs", "addClass", "too-many")

    def update_device_supported_features(self):
        """
        Refreshes the page and only shows options that are supported by the current "active" device.
        """
        stdout.vprint("\nSet active device: " + self.active_device.name)

        # Gather device information
        device_name = str(self.active_device.name)
        device_type = self.active_device.type
        device_image = self.get_device_image(self.active_device, "actual", "perspective_img")
        effect_support = [self.active_device.has("lighting"), self.active_device.has("lighting_logo"), self.active_device.has("lighting_scroll")]
        brightness_support = [self.active_device.has("brightness"), self.active_device.has("lighting_logo_brightness"), self.active_device.has("lighting_scroll_brightness")]

        # Update GUI
        self.webkit.run_javascript("change_header('{0}')".format(device_name))
        self.update_page("#fx-image", "attr", "src", device_image)

        # Assume game mode / macro keys and profiles for keyboards for now.
        if device_type == "keyboard":
            self.update_page(".keyboard-only", "fadeIn", "fast")
        else:
            self.update_page(".keyboard-only", "fadeOut", "fast")

        ## Lighting Effects
        def add_to_dropdown(target_element, internal_name, string, source):
            # internal_name = Used for icon name and passed in command.
            self.update_page(target_element, "append", "<button onclick='cmd(\"{0}\")'><img src='{1}'/> {2}</button>".format(
                "effect?" + source + "?" + internal_name, "../img/effects/" + internal_name + ".svg", string))

        if True in effect_support:
            self.update_page("#fx-lighting", "show")

            if self.active_device.has("lighting"):
                self.update_page("#lighting-dropdown", "show")
                self.update_page("#lighting-list", "html", " ")
                self.update_background_header(pref.get_device_state(self.active_device.serial, "main", "colour_primary"))
                fx_list = [
                    # [has() parameter, icon/command, human string]
                    ["lighting_none", "none", _("None")],
                    ["lighting_spectrum", "spectrum", _("Spectrum")],
                    ["lighting_wave", "wave", _("Wave")],
                    ["lighting_reactive", "reactive", _("Reactive")],
                    ["lighting_breath_single", "breath", _("Breath")],
                    ["lighting_pulsate", "pulsate", _("Pulsate")],
                    ["lighting_ripple", "ripple", _("Ripple")],
                    ["lighting_static", "static", _("Static")]
                ]

                for fx in fx_list:
                    if self.active_device.has(fx[0]):
                        add_to_dropdown("#lighting-list", fx[1], fx[2], "main")
            else:
                self.update_page("#lighting-dropdown", "hide")

            if self.active_device.has("lighting_logo"):
                self.update_page("#lighting-logo-dropdown", "show")
                self.update_page("#lighting-logo-list", "html", " ")
                self.update_background_header(pref.get_device_state(self.active_device.serial, "logo", "colour_primary"))
                fx_list = [
                    # [has() parameter, icon/command, human string]
                    ["lighting_logo_none", "none", _("None")],
                    ["lighting_logo_blinking", "blinking", _("Blinking")],
                    ["lighting_logo_spectrum", "spectrum", _("Spectrum")],
                    ["lighting_logo_wave", "wave", _("Wave")],
                    ["lighting_logo_reactive", "reactive", _("Reactive")],
                    ["lighting_logo_pulsate", "pulsate", _("Pulsate")],
                    ["lighting_logo_static", "static", _("Static")]
                ]

                # Razer Abyssus has "lighting_logo" but no effects, so track if this happens.
                has_effects = False

                for fx in fx_list:
                    if self.active_device.has(fx[0]):
                        add_to_dropdown("#lighting-logo-list", fx[1], fx[2], "logo")
                        has_effects = True

                if not has_effects:
                    self.update_page("#lighting-dropdown", "hide")
                    self.update_page("#fx-lighting", "hide")

            else:
                self.update_page("#lighting-logo-dropdown", "hide")

            if self.active_device.has("lighting_scroll"):
                self.update_page("#lighting-scroll-dropdown", "show")
                self.update_page("#lighting-scroll-list", "html", " ")
                self.update_background_header(pref.get_device_state(self.active_device.serial, "scroll", "colour_primary"))
                fx_list = [
                    # [has() parameter, icon/command, human string]
                    ["lighting_scroll_none", "none", _("None")],
                    ["lighting_scroll_blinking", "blinking", _("Blinking")],
                    ["lighting_scroll_spectrum", "spectrum", _("Spectrum")],
                    ["lighting_scroll_wave", "wave", _("Wave")],
                    ["lighting_scroll_reactive", "reactive", _("Reactive")],
                    ["lighting_scroll_breath_single", "breath", _("Breath")],
                    ["lighting_scroll_pulsate", "pulsate", _("Pulsate")],
                    ["lighting_scroll_static", "static", _("Static")]
                ]

                for fx in fx_list:
                    if self.active_device.has(fx[0]):
                        add_to_dropdown("#lighting-scroll-list", fx[1], fx[2], "scroll")
            else:
                self.update_page("#lighting-scroll-dropdown", "hide")

        else:
            self.update_page("#fx-lighting", "hide")

        ## Brightness
        if True in brightness_support:
            self.update_page("#fx-brightness", "show")
            self.update_page(".brightness-container", "hide")

            if self.active_device.has("brightness"):
                stdout.vprint("Device supports 'brightness'")
                self.update_page("#brightness-normal", "show")

            if self.active_device.has("lighting_logo_brightness"):
                stdout.vprint("Device supports 'lighting_logo_brightness'")
                self.update_page("#brightness-logo", "show")

            if self.active_device.has("lighting_scroll_brightness"):
                stdout.vprint("Device supports 'lighting_scroll_brightness'")
                self.update_page("#brightness-scroll", "show")
        else:
            self.update_page("#fx-brightness", "hide")

        # Unless the device only supports on/off toggling
        if not True in brightness_support and self.active_device.has("lighting_logo_active"):
            stdout.vprint("Device supports 'lighting_logo_active'")
            self.update_page("#fx-brightness", "show")
            self.update_page(".brightness-container", "hide")
            self.update_page("#brightness-logo-toggle", "show")

    def update_device_active_options(self):
        """
        Refreshes the page by showing the options selected for the active device.
        """

        # Clear Overview Screen
        self.update_page("#device-"+self.active_device_serial+"-brightness", "html", " ")

        ## Brightness
        def set_brightness_control(element, value):
            ### Device Screen
            self.update_page(element + "-input", "val", str(value))
            if int(value) == 0:
                self.update_page(element + "-value", "html", _("Off"))
            else:
                self.update_page(element + "-value", "html", str(int(value)) + "%")

            ### Overview Screen
            self.update_page("#device-" + self.active_device_serial + "-brightness", "append", str(int(value)) + '%&nbsp;')

        if self.active_device.has("lighting_logo_active"):
            if self.active_device.fx.misc.logo.active == 1:
                self.update_page("#brightness-logo-switch", "prop", "checked", "true")
            else:
                self.update_page("#brightness-logo-switch", "removeAttr", "checked")

        if self.active_device.has("brightness"):
            set_brightness_control("#brightness-normal", self.active_device.brightness)

        if self.active_device.has("lighting_logo_brightness"):
            set_brightness_control("#brightness-logo", self.active_device.fx.misc.logo.brightness)

        if self.active_device.has("lighting_scroll_brightness"):
            set_brightness_control("#brightness-scroll", self.active_device.fx.misc.scroll_wheel.brightness)

        ## Lighting Effects
        self.update_page("#fx-colour-primary", "hide")
        self.update_page("#fx-colour-secondary", "hide")
        self.update_page("#device-"+self.active_device_serial+"-effect > span", "html", " ")

        def update_lighting_dropdown(element, effect):
            self.update_page(element, "html", "<img src='{1}'/> {0}".format(trans.get_effect_state_string(effect), "../img/effects/" + effect + ".svg"))

        if self.active_device.has("lighting"):
            try:
                effect = pref.get_device_state(self.active_device.serial, "main", "effect")

                if effect == "profile":
                    uuid = pref.get_device_state(self.active_device.serial, "main", "profile")
                    data = self.profiles.get_metadata(uuid)

                    # Device Tab
                    self.update_page("#active-effect", "html", "<img src='{1}'/> {0}".format(data.get("name"), data.get("icon")))
                    self.update_page("#app-" + uuid, "addClass", "active")

                    # Overview Screen
                    self.update_page("#device-"+self.active_device_serial+"-effect > span", "html", data.get("name"))
                    self.update_page("#device-"+self.active_device_serial+"-effect > img", "attr", "src", data.get("icon"))

                else:
                    # Device Tab
                    update_lighting_dropdown("#active-effect", effect)
                    self.update_lighting_options("main", effect)

                    # Overview Screen
                    self.update_page("#device-"+self.active_device_serial+"-effect > span", "html", trans.get_effect_state_string(effect))
                    self.update_page("#device-"+self.active_device_serial+"-effect > img", "attr", "src", "../img/effects/" + effect + ".svg")

            except TypeError:
                update_lighting_dropdown("#active-effect", "unknown")

        if self.active_device.has("lighting_logo"):
            try:
                effect = pref.get_device_state(self.active_device.serial, "logo", "effect")

                # Device Tab
                update_lighting_dropdown("#active-effect-logo", effect)

                # Overview Screen
                self.update_page("#device-"+self.active_device_serial+"-effect > span", "append", "&nbsp;" + trans.get_effect_state_string(effect))
                self.update_page("#device-"+self.active_device_serial+"-effect > img", "attr", "src", "../img/effects/" + effect + ".svg")

            except TypeError:
                update_lighting_dropdown("#active-effect-logo", "unknown")
                self.update_lighting_options("logo", effect)

        if self.active_device.has("lighting_scroll"):
            try:
                effect = pref.get_device_state(self.active_device.serial, "scroll", "effect")

                # Device Tab
                update_lighting_dropdown("#active-effect-scroll", effect)

                # Overview Screen
                self.update_page("#device-"+self.active_device_serial+"-effect > span", "append", "&nbsp;" + trans.get_effect_state_string(effect))
                self.update_page("#device-"+self.active_device_serial+"-effect > img", "attr", "src", "../img/effects/" + effect + ".svg")

            except TypeError:
                update_lighting_dropdown("#active-effect-scroll", "unknown")
                self.update_lighting_options("scroll", effect)

    def set_lighting_effect(self, source, effect, fx_params=None):
        """
        source = Lighting source
                 e.g. main / scroll / wheel
        effect = Internal effect name
                 wave / spectrum / static
        params = (Optional) Any parameters for the effect, seperated by '?'.
                 e.g. 255?255?255?2
        """

        # For remembering current device state
        def remember_params(params):
            pref.set_device_state(self.active_device.serial, source, "effect_params", params)

        if fx_params:
            params = fx_params.split('?')
            remember_params(fx_params)
        else:
            params = None

        # Determine source function
        if source == "main":
            fx = self.active_device.fx

        elif source == "logo":
            fx = self.active_device.fx.misc.logo

        elif source == "scroll":
            fx = self.active_device.fx.misc.scroll_wheel

        # Determine colours
        primary_colours = pref.get_device_state(self.active_device.serial, source, "colour_primary")
        secondary_colours = pref.get_device_state(self.active_device.serial, source, "colour_secondary")

        if primary_colours != None:
            primary_red = primary_colours[0]
            primary_green = primary_colours[1]
            primary_blue = primary_colours[2]
        else:
            primary_red = 0
            primary_green = 255
            primary_blue = 0

        if secondary_colours != None:
            secondary_red = secondary_colours[0]
            secondary_green = secondary_colours[1]
            secondary_blue = secondary_colours[2]
        else:
            secondary_red = 255
            secondary_green = 0
            secondary_blue = 0

        stdout.vvprint("Using RGB for primary colour: {0}, {1}, {2}".format(str(primary_red), str(primary_green), str(primary_blue)))
        stdout.vvprint("Using RGB for secondary colour: {0}, {1}, {2}".format(str(primary_red), str(primary_green), str(primary_blue)))

        # Execute function (only if source is known)
        if fx:
            if effect == "none":
                fx.none()

            elif effect == "spectrum":
                fx.spectrum()

            elif effect == "wave":
                # Params:  <direction 1-2>
                if params:
                    fx.wave(int(params[0]))
                else:
                    fx.wave(1)
                    remember_params(1)

            elif effect == "reactive":
                # Params:  <speed 1-4>
                if params:
                    fx.reactive(primary_red, primary_green, primary_blue, int(params[0]))
                else:
                    fx.reactive(primary_red, primary_green, primary_blue, 2)
                    remember_params(2)

            elif effect == "blinking":
                if params:
                    fx.blinking(primary_red, primary_green, primary_blue)
                else:
                    fx.blinking(primary_red, primary_green, primary_blue)

            elif effect == "breath":
                if params:
                    if params[0] == 'random':
                        fx.breath_random()

                    elif params[0] == 'single':
                        fx.breath_single(primary_red, primary_green, primary_blue)

                    elif params[0] == 'dual':
                        fx.breath_dual(primary_red, primary_green, primary_blue,
                                       secondary_red, secondary_green, secondary_blue)

                    # TODO: Add triple breath support

                else:
                    fx.breath_random()
                    remember_params('random')

            elif effect == "pulsate":
                fx.pulsate(primary_red, primary_green, primary_blue)

            elif effect == "ripple":
                if params:
                    if params[0] == 'single':
                        fx.ripple(primary_red, primary_green, primary_blue, 0.01)

                    elif params[0] == 'random':
                        fx.ripple_random(0.01)

                else:
                    fx.ripple_random()
                    remember_params('random')

            elif effect == "static":
                fx.static(primary_red, primary_green, primary_blue)

        else:
            stdout.vvprint("FX not applied, source not recognised.")

    def update_lighting_options(self, source=None, effect=None):
        """
        Refreshes the UI for displaying the correct and supported options.

        source = Which light source to process.
                 e.g. main/logo/scroll

        effect = Known effect name to process.
                 e.g. reactive, wave, spectrum
        """
        # Hide/clear existing contents
        self.update_page("#fx-options-" + source, "html", " ")
        self.update_page(".app-profile-item", "removeClass", "active")

        # If none specified, just clear the options.
        if source == None or effect == None:
            return

        params = str(pref.get_device_state(self.active_device.serial, source, "effect_params"))
        target = "#fx-options-" + source

        if source == "main":
            source_has_string = "lighting_"
        elif source == "logo":
            source_has_string = "lighting_logo_"
        elif source == "scroll":
            source_has_string = "lighting_scroll_"

        # Template for adding option controls to page
        def add_radio_option(label, param):
            if params == param:
                checked = "checked"
            else:
                checked = ""

            template = "<label><input type='radio' onclick='setfx(\"{4}\", \"{0}\", \"{1}\")' {3} /> {2}</label>".format(effect, param, label, checked, source)
            self.update_page(target, "append", template)

        # Show supported options for effect
        def add_but_check_ability(has_effect, label, param):
            has_string = source_has_string + has_effect
            if self.active_device.has(has_string):
                add_radio_option(label, param)

        if effect == "wave":
            # Customise wave direction string depending on form factor
            device_type = self.active_device.type
            if self.get_device_type(device_type) == "mouse":
                left = _("Down")
                right = _("Up")
            elif self.get_device_type(device_type) == "mousemat":
                left = _("Clockwise")
                right = _("Anti-clockwise")
            else:
                left = _("Left")
                right = _("Right")

            add_radio_option(left, '2')
            add_radio_option(right, '1')

        elif effect == "reactive":
            add_radio_option(_("Fast"), '1')
            add_radio_option(_("Medium"), '2')
            add_radio_option(_("Slow"), '3')
            add_radio_option(_("Very Slow"), '4')

        elif effect == "breath":
            add_but_check_ability("breath_random", _("Random"), 'random')
            add_but_check_ability("breath_single", _("Single Color"), 'single')
            add_but_check_ability("breath_dual", _("Dual Colors"), 'dual')
            # TODO: Add triple breath support
            #~ add_but_check_ability("breath_triple", _("Triple Colors"), 'triple')

        elif effect == "ripple":
            add_but_check_ability("ripple_random", _("Random"), 'random')
            add_but_check_ability("ripple", _("Single Color"), 'single')

        # Show colour picker (for supported effects)
        show_primary = False
        show_secondary = False
        if effect in ["reactive", "ripple", "pulsate", "static"]:
            show_primary = True

            if params == "random":
                show_primary = False

        if effect == "breath" and params == "single":
            show_primary = True

        elif effect == "breath" and params == "dual":
            show_primary = True
            show_secondary = True

        if show_primary:
            self.print_colour_options(
                "colour-primary",
                "#fx-options-"+source,
                pref.get_device_state(self.active_device.serial, source, "colour_primary"),
                source,
                [source, effect, pref.get_device_state(self.active_device.serial, source, "effect_params")]
            )

        if show_secondary:
            self.print_colour_options(
                "colour-secondary",
                "#fx-options-"+source,
                pref.get_device_state(self.active_device.serial, source, "colour_secondary"),
                source,
                [source, effect, pref.get_device_state(self.active_device.serial, source, "effect_params")]
            )

    def get_device_type(self, device_type):
        """
        Convert the daemon's device type string to what Polychromatic identifies as "form factor".
        This is used for determining icons.
        """
        if device_type == "firefly":
            form_factor = "mousemat"
        elif device_type == "tartarus":
            form_factor = "keypad"
        else:
            form_factor = device_type
        return(form_factor)

    def update_background_header(self, colour_rgb):
        """
        Refreshes the dynamic background header based on the current device.
            colour_rgb = [red, green, blue] - Colour to change the header to.
        """
        if not self.current_page == "menu":
            return

        device_type = self.get_device_type(self.active_device.type)
        effect = pref.get_device_state(self.active_device.serial, "main", "effect")
        if colour_rgb:
            red = colour_rgb[0]
            green = colour_rgb[1]
            blue = colour_rgb[2]
        else:
            red = 0
            green = 255
            blue = 0

        if not os.path.exists(os.path.join(data_source, "img/header/" + device_type + ".png")):
            device_type = "generic"

        if effect == "spectrum":
            self.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, "spectrum"))
        elif effect == "wave":
            self.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, "wave"))
        else:
            rgba = "rgba({0},{1},{2},1)".format(str(red), str(green), str(blue))
            self.webkit.run_javascript("changeHeaderImg('{0}', '{1}');".format(device_type, rgba))

    def show_error_page(self, severity, icon, title, message):
        """
        When things go horribly wrong and the application should abort or restart.
        """
        # severity  =   'normal', 'warning', 'serious'
        # icon      =   Filename as seen in ../img/error/
        # title / message = Strings to display.

        # For loading screens that should stay regardless of error.
        if self.load_lock:
            return

        # Gives window enough time to open.
        time.sleep(1)
        self.error_title = title
        self.error_icon = icon
        self.error_message = message
        self.error_class = severity
        self.show_menu("error")

    def print_colour_options(self, colour_id, target_append_element, start_rgb, source, effect_callback=None):
        """
        Creates a colour grid for choosing custom colours.
            colour_id               = ID of colour (in devicestate) and container element.
            target_append_element   = ID of element to append to.
            start_rgb               = [red, green, blue] - list containing current colour.
            source                  = Where the colour is located, e.g. "main", "logo", "scroll".
            effect_callback         = [source, effect, params] - optional list for setting an effect based on effect.
        """
        colour_index = pref.load_file(path.colours, True)
        uuids = list(colour_index)
        uuids.sort(key=int)

        if start_rgb == None:
            start_rgb = [0, 255, 0]

        preview_element = "{0}-{1}-preview".format(colour_id, source)
        html_buffer =  "<div id='{0}' class='colour-picker'>".format(colour_id)
        html_buffer += "<table><tr><td><div id='{0}' class='colour-preview' style='background-color:rgba({1},{2},{3},1)'></div></td>".format(
                            preview_element, str(start_rgb[0]), str(start_rgb[1]), str(start_rgb[2])) + \
                        "<td><button class='btn' onclick='cmd(\"ask-colour?{0}?{2}\")'>{1}</button></td></tr>".format(colour_id, _("Custom..."), source)
        html_buffer += "<tr><td colspan='2'>"

        item_no = 0
        for uuid in uuids:
            item_no += 1
            name = colour_index[uuid].get("name")
            red = colour_index[uuid].get("col")[0]
            green = colour_index[uuid].get("col")[1]
            blue = colour_index[uuid].get("col")[2]

            if effect_callback:
                if effect_callback[2]:
                    onclick = "cmd(\"set-colour?{0}?{1}?{2}?{3}?{4}\"); cmd(\"effect?{5}?{6}?{7}\")".format(colour_id, red, green, blue, source,
                                                                                                    effect_callback[0], effect_callback[1], effect_callback[2])
                else:
                    onclick = "cmd(\"set-colour?{0}?{1}?{2}?{3}?{4}\"); cmd(\"effect?{5}?{6}\")".format(colour_id, red, green, blue, source,
                                                                                                    effect_callback[0], effect_callback[1])
            else:
                onclick = "cmd(\"set-colour?{0}?{1}?{2}?{3}?{4}\")".format(colour_id, red, green, blue, source)

            # Add "show more" button and prepare dropdown if we have many colours.
            if item_no == 10:
                html_buffer += "<button onclick='toggleDropdown(\"{0}\")' class='dropdown-focus colour-item color-more-btn' title='{1}'></button>".format(colour_id+"-list", _("More Colors"))
                html_buffer += "<div class='dropdown' hidden>"
                html_buffer += "<div id='{0}' class='dropdown-content'>".format(colour_id+"-list")

            # Show first 10 items as clickable boxes.
            if item_no <= 9:
                html_buffer += "<button class='colour-icon' onclick='{0}' title='{1}' style='background-color:rgba({2},{3},{4},1)'></button>".format(
                                onclick, name, red, green, blue)

            # Add the rest to the "show more" menu.
            else:
                html_buffer += "<button onclick='{0}' title='{1}'><div class='colour-item' style='background-color:rgba({2},{3},{4},1)'></div> {1}</button>".format(
                                onclick, name, red, green, blue)

        # Close container for dropdown (if applicable)
        if item_no > 10:
            html_buffer += "</div></div>"

        # Close overall container and append to page
        html_buffer += "</td></tr></table>"
        self.update_page(target_append_element, "append", html_buffer)

    @staticmethod
    def generate_css_colour_svg(svg_path, colours, width, height, optional_class=None):
        inline_buffer = "style='background: rgba({0},{1},{2},1); -webkit-mask: url({3}) center / contain no-repeat; width: {4}px; height: {5}px;'".format(
                            colours[0], colours[1], colours[2], svg_path, str(width), str(height)
                        )
        if optional_class:
            inline_buffer += " class='{0}'".format(optional_class)
        return(inline_buffer)

    @staticmethod
    def generate_css_colour_text(colours, optional_class=None):
        inline_buffer = "style='color: rgba({0},{1},{2},1)'".format(colours[0], colours[1], colours[2])
        if optional_class:
            inline_buffer += " class='{0}'".format(optional_class)
        return(inline_buffer)

    def get_device_image(self, device, image, direction=None):
        """
        Retrieves an image or icon of a device.
            device      = Daemon device object
            image       = "actual" = Use an actual image (provided by razer_urls)
                          "icon" = Use an icon state
            direction   = (Optional) Only if image = 'actual', specify which to grab from dictonary.
        """
        unknown_icon = "../img/states/unknown.svg"

        if image == "actual":
            try:
                img_path = device.razer_urls.get(direction)
            except:
                stdout.vprint("Daemon does not have a '{0}' image for '{1}'".format(direction, device.name))
                image = "icon"

        if image == "icon":
            formfactor = self.get_device_type(device.type)
            img_path = data_source + "/img/states/{0}.svg".format(formfactor)
            if not os.path.exists(img_path):
                img_path = unknown_icon

        if img_path:
            return(img_path)
        else:
            return(unknown_icon)


class Dialogues(object):
    def fatal_error(message, do_quit=False):
        dialog = Gtk.MessageDialog(type = Gtk.MessageType.ERROR, buttons = Gtk.ButtonsType.OK)
        dialog.set_title("Polychromatic Controller")
        dialog.set_markup(message)
        dialog.run()
        dialog.destroy()
        if do_quit:
            sys.exit()

    def color_picker():
        # TODO: Ability to track and set last colour in GTK dialog.
        colorseldlg = Gtk.ColorSelectionDialog(_("Choose a Color"))
        colorsel = colorseldlg.get_color_selection()

        if colorseldlg.run() == Gtk.ResponseType.OK:
            colour = colorsel.get_current_color()
            red = int(colour.red / 256)
            green = int(colour.green / 256)
            blue = int(colour.blue / 256)
            colorseldlg.destroy()
            return "{0},{1},{2}".format(str(red),str(green),str(blue))
        else:
            colorseldlg.destroy()
            return None

    def file_picker(help_text, filter_mode):
        #   help_text   =   String displayed in dialog title.
        #   filters     =   Predefined filters (e.g. 'image')

        win = Gtk.Window(title=_("Polychromatic Controller"))
        dialog = Gtk.FileChooserDialog(help_text, app.window, Gtk.FileChooserAction.OPEN, \
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
                                      )
        # Setup filters
        if filter_mode == 'image':
            a = Gtk.FileFilter()
            a.set_name(_("All Images"))
            a.add_mime_type("image/jpeg")
            a.add_mime_type("image/png")
            a.add_mime_type("image/gif")
            a.add_mime_type("image/svg+xml")
            dialog.add_filter(a)

            j = Gtk.FileFilter()
            j.set_name("JPEG " + _("Image"))
            j.add_mime_type("image/jpeg")
            dialog.add_filter(j)

            p = Gtk.FileFilter()
            p.set_name("PNG " + _("Image"))
            p.add_mime_type("image/png")
            dialog.add_filter(p)

            g = Gtk.FileFilter()
            g.set_name("GIF " + _("Image"))
            g.add_mime_type("image/gif")
            dialog.add_filter(g)

            s = Gtk.FileFilter()
            s.set_name("SVG " + _("Image"))
            s.add_mime_type("image/svg+xml")
            dialog.add_filter(s)

        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            path = dialog.get_filename()
            dialog.destroy()
            return path
        else:
            dialog.destroy()
            return None


class Terminal(object):
    """
    Various functions for pretty printing to stdout for debugging.
    """
    def __init__(self):
        """
        Process parameters (arguments) passed via the terminal.
        """
        self.be_verbose = False
        self.be_very_verbose = False

        for arg in sys.argv[1:]:
            if arg == '--help' or arg == '-h':
                self.show_help()

            elif arg == '--verbose' or arg == '-v':
                self.be_verbose = True
                self.vprint('Verbose enabled.')

            elif arg == '-vv' or arg == '--debug':
                self.be_verbose = True
                self.be_very_verbose = True
                self.vvprint('Debug verbose enabled.')

            else:
                print('Ignoring unrecognised parameters:' + arg)

    def show_help(self):
      print("Usage: polychromatic-controller [parameters]\n")
      #     | Command                      | Help Text                                     |
      print("  -h, --help                   Show this help text.")
      print("  -v, --verbose                Be verbose to stdout.")
      print("  -vv, --debug                 Be very verbose. For debugging only.")
      print('')
      exit(0)

    def error(self, text):
        if sys.stdout.isatty():
            print('\033[91m' + text + '\033[0m')
        else:
            print(text)

    def vprint(self, text):
        if self.be_verbose:
            if sys.stdout.isatty():
                print('\033[93m' + text + '\033[0m')
            else:
                print(text)

    def vvprint(self, text):
        if self.be_very_verbose:
            if sys.stdout.isatty():
                print('\033[94m' + text + '\033[0m')
            else:
                print(text)


def icon_name_to_path(icon_name):
    """
    This shared function gets an image path using Gtk.
    """
    theme = Gtk.IconTheme.get_default()
    info = theme.lookup_icon(icon_name, 22, 0)
    path = info.get_filename()
    if path:
        return path
    else:
        return 'null'

def restart_tray_applet():
    print("Tray applet restarting...")
    # Get the PID written in memory.
    try:
        with open(tray_pid_file) as stream:
            tray_pid = int(stream.readline())
        print(tray_pid)
    except IOError:
        print("Tray applet is not running.")
        return

    # Where is the tray applet?
    if __file__.startswith("/usr"):
        tray_bin_path = "/usr/bin/polychromatic-tray-applet"
    else:
        tray_bin_path = os.path.join(path.get_data_source(__file__) + "/../polychromatic-tray-applet")

    # Attempt to gracefully stop the process, then launch again.
    try:
        os.kill(tray_pid, 15)
        background_process(tray_bin_path)
    except OSError:
        print("Tray applet is not running or couldn't be relaunched.")
        return
    print("Tray Applet Reloaded.")

def restart_daemon_service():
    from subprocess import check_output
    from shutil import which

    # Enough time to load "loading" page
    time.sleep(0.5)

    # Is the daemon actually installed?
    if not which("razer-service"):
        app.load_lock = False
        app.show_error_page("serious", "generic", _("Daemon Not Installed."),
            _("Could not find the executable for 'razer-service'. Please try re-installing the daemon."))
        return

    # Gracefully stop the daemon
    print("Stopping razer-service.", end='')
    app.update_page("#status-text", "html", _("Stopping daemon..."))
    try:
        app.devman.stop_daemon()
    except Exception as NoneType:
        # Cannot stop gracefully. Skip this.
        pass

    # Wait for the daemon to stop.
    stopped = False
    app.update_page("#status-text", "html", _("Waiting for the daemon to stop..."))
    app.update_page(".progress", "fadeIn", "fast")
    app.update_page(".progress-inner", "addClass", "increasing")

    for x in range(0,5):
        print(".", end='')
        try:
            daemon_pid = int(check_output(["pidof", "razer-service"]))
        except:
            stopped = True
            break
        time.sleep(1)

    app.update_page(".progress", "fadeOut", "fast")
    app.update_page(".progress-inner", "removeClass", "increasing")

    # Kill the daemon if still not ended
    if not stopped:
        print("\nKilling razer-service...")
        app.update_page("#status-text", "html", _("Killing daemon process..."))
        os.kill(daemon_pid, 9)

    # Wait for daemon to start again
    time.sleep(1)
    print("\nStarting razer-service...")
    app.update_page("#status-text", "html", _("Starting daemon..."))
    background_process("razer-service", shell=True)

    # Check the process is running
    print("Waiting for razer-service to start...")
    app.update_page("#status-text", "html", _("Waiting for daemon to start..."))
    app.update_page(".progress", "fadeIn", "fast")
    app.update_page(".progress-inner", "addClass", "increasing")
    for x in range(0,5):
        print(".", end='')
        try:
            daemon_pid = int(check_output(["pidof", "razer-service"]))
            running = True
            break
        except:
            running = False
        time.sleep(1)

    if not running:
        app.load_lock = False
        app.show_error_page("serious", "generic", _("Daemon cannot be relaunched."),
            _("Failed to execute 'razer-service'. Please check the daemon log to troubleshoot the problem.") + \
             '<br><code>~/.razer-service/logs/</code><br><br>' + _("Alternately, open a terminal and run:") + '<br><code>razer-service -F</code>')
        return

    # Relaunch Controller / Tray Applet
    print("Relaunching Polychromatic...")
    app.update_page(".progress", "fadeOut", "fast")
    app.update_page("#loading", "fadeOut", "fast")
    app.update_page("#status-text", "fadeOut", "fast")
    restart_tray_applet()
    os.execv(__file__, sys.argv)


# For restarting the tray applet (only when running)
tray_pid_file = os.path.join("/run/user/", str(os.getuid()), "polychromatic-tray-applet.pid")


class RazerChromaKeyboardDemo(object):
    """
    Razer Chroma Keyboard Demo
      -- Can be run by visiting the About page in Preferences.

    A synchronised keylight show based on the advert:
    https://www.youtube.com/watch?v=0VRK_bsE6nw
    """
    def __init__(self, webkit, profiles, chroma, show_menu_callback):
        self.webkit = webkit
        self.profiles = profiles
        self.chroma = chroma
        self.webkit.connect('notify::is-playing-audio', self.run_start)
        self.started = False
        self.show_menu_callback = show_menu_callback

    def run_start(self, view, frame):
        thread = threading.Thread(target=self.run, args=())
        thread.daemon = True
        thread.start()

    def run(self):
        if self.started:
            return
        else:
            self.started = True

        # Functions for presentation
        def wait(seconds=1):
            time.sleep(seconds)

        def fadeIn():
            self.chroma.brightness = 0
            for x in range(0, 10):
                self.chroma.brightness = x * 10
            time.sleep(0.05)

        def fadeOut():
            for x in range(0, 20):
                self.chroma.brightness = 100 - (x * 5)
                time.sleep(0.05)
            self.chroma.brightness = 0
            time.sleep(0.05)

        def intro_part(self, data):
            self.profiles.send_profile_to_keyboard(self.chroma, json.loads(data))
            fadeIn()
            wait(0.4)
            fadeOut()

        from random import randint
        def random_colour():
            r = randint(0,255)
            g = randint(0,255)
            b = randint(0,255)
            return(r,g,b)

        def draw_colours():
            for row in range(0, 6):
                for col in range(0, 22):
                    self.chroma.fx.advanced.matrix[row, col] = random_colour()
            self.chroma.fx.advanced.draw()

        # Demo Sequence
        self.chroma.brightness = 0
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        intro_part(self, '{"rows": {"0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "3": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}')
        self.chroma.fx.wave(1)
        fadeIn()
        wait(1.25)

        for x in range(0,50):
            draw_colours()

        self.chroma.fx.wave(2)
        wait(1.25)
        fadeOut()
        wait(3.5)
        self.chroma.fx.static(0,255,0)
        fadeIn()
        wait(1)

        self.chroma.brightness = 0
        self.profiles.send_profile_to_keyboard(self.chroma, json.loads('{"rows": {"3": [[0, 0, 0], [0, 0, 0], [255, 165, 0], [255, 165, 0], [255, 165, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 165, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}'))
        fadeIn()
        wait(1.5)

        self.chroma.brightness = 0
        self.profiles.send_profile_to_keyboard(self.chroma, json.loads('{"rows": {"3": [[0, 0, 0], [0, 0, 0], [255, 165, 0], [255, 165, 0], [255, 165, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 0, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 165, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}'))
        fadeIn()
        wait(1.5)

        self.chroma.brightness = 0
        self.profiles.send_profile_to_keyboard(self.chroma, json.loads('{"rows": {"3": [[0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 255, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 0, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "5": [[0, 0, 0], [0, 0, 255], [0, 0, 0], [0, 0, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "2": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "4": [[0, 0, 0], [0, 0, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "1": [[0, 0, 0], [0, 0, 0], [255, 82, 15], [255, 82, 15], [255, 82, 15], [255, 82, 15], [255, 82, 15], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], "0": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]}}'))
        fadeIn()
        wait(1.5)

        self.chroma.brightness = 0
        self.chroma.fx.wave(2)
        fadeIn()

        wait(2.5)
        self.chroma.fx.static(0,255,0)
        fadeIn()
        fadeOut()
        wait(6)
        self.chroma.fx.static(205,0,255)
        fadeIn()
        wait(1)
        self.chroma.fx.static(0,0,255)
        wait(1)
        self.chroma.fx.static(0,255,0)

        wait(8)
        self.show_menu_callback("menu")


if __name__ == "__main__":
    data_source = path.get_data_source(__file__)
    stdout = Terminal()
    trans = Translations()
    app = Controller()
    app.start()
